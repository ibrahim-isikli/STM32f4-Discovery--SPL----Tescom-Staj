
017_STDP_MULTI_EXTI_Ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f20  08000f20  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000f20  08000f20  00010f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f24  08000f24  00010f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08000f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          000000ac  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000bc  200000bc  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000053a3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000113f  00000000  00000000  000253e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000728  00000000  00000000  00026528  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000670  00000000  00000000  00026c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002934  00000000  00000000  000272c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002553  00000000  00000000  00029bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002c147  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cd4  00000000  00000000  0002c1c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002de98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f08 	.word	0x08000f08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08000f08 	.word	0x08000f08

080001c8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <NVIC_PriorityGroupConfig+0x24>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
 8000200:	230f      	movs	r3, #15
 8000202:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d039      	beq.n	8000280 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <NVIC_Init+0xbc>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	43db      	mvns	r3, r3
 8000212:	0a1b      	lsrs	r3, r3, #8
 8000214:	b2db      	uxtb	r3, r3
 8000216:	f003 0307 	and.w	r3, r3, #7
 800021a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	f1c3 0304 	rsb	r3, r3, #4
 8000222:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000224:	7b7a      	ldrb	r2, [r7, #13]
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	fa42 f303 	asr.w	r3, r2, r3
 800022c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	461a      	mov	r2, r3
 8000234:	7bbb      	ldrb	r3, [r7, #14]
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	789a      	ldrb	r2, [r3, #2]
 8000240:	7b7b      	ldrb	r3, [r7, #13]
 8000242:	4013      	ands	r3, r2
 8000244:	b2da      	uxtb	r2, r3
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	4313      	orrs	r3, r2
 800024a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	011b      	lsls	r3, r3, #4
 8000250:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <NVIC_Init+0xc0>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4413      	add	r3, r2
 800025a:	7bfa      	ldrb	r2, [r7, #15]
 800025c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <NVIC_Init+0xc0>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	095b      	lsrs	r3, r3, #5
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	f003 031f 	and.w	r3, r3, #31
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027e:	e00f      	b.n	80002a0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000280:	490b      	ldr	r1, [pc, #44]	; (80002b0 <NVIC_Init+0xc0>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	095b      	lsrs	r3, r3, #5
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f003 031f 	and.w	r3, r3, #31
 8000294:	2201      	movs	r2, #1
 8000296:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000298:	f100 0320 	add.w	r3, r0, #32
 800029c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <DAC_SetChannel1Data+0x34>)
 80002c6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	3308      	adds	r3, #8
 80002d0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	461a      	mov	r2, r3
 80002d6:	887b      	ldrh	r3, [r7, #2]
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40007400 	.word	0x40007400

080002ec <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <DMA_Init+0xac>)
 8000304:	4013      	ands	r3, r2
 8000306:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000316:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000322:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	6a1b      	ldr	r3, [r3, #32]
 8000328:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800032e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000334:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800033a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000340:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	4313      	orrs	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 0307 	bic.w	r3, r3, #7
 800035a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4313      	orrs	r3, r2
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	4313      	orrs	r3, r2
 800036a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	691a      	ldr	r2, [r3, #16]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	689a      	ldr	r2, [r3, #8]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	60da      	str	r2, [r3, #12]
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	f01c803f 	.word	0xf01c803f

0800039c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d006      	beq.n	80003bc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f043 0201 	orr.w	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80003ba:	e005      	b.n	80003c8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 0201 	bic.w	r2, r3, #1
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003ec:	2301      	movs	r3, #1
 80003ee:	73fb      	strb	r3, [r7, #15]
 80003f0:	e001      	b.n	80003f6 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000404:	b480      	push	{r7}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800040e:	2300      	movs	r3, #0
 8000410:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a15      	ldr	r2, [pc, #84]	; (8000470 <DMA_GetFlagStatus+0x6c>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d802      	bhi.n	8000424 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <DMA_GetFlagStatus+0x70>)
 8000420:	613b      	str	r3, [r7, #16]
 8000422:	e001      	b.n	8000428 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <DMA_GetFlagStatus+0x74>)
 8000426:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800042e:	2b00      	cmp	r3, #0
 8000430:	d003      	beq.n	800043a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	e002      	b.n	8000440 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000446:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800044a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	4013      	ands	r3, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	d002      	beq.n	800045c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000456:	2301      	movs	r3, #1
 8000458:	75fb      	strb	r3, [r7, #23]
 800045a:	e001      	b.n	8000460 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800045c:	2300      	movs	r3, #0
 800045e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000460:	7dfb      	ldrb	r3, [r7, #23]
}
 8000462:	4618      	mov	r0, r3
 8000464:	371c      	adds	r7, #28
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	4002640f 	.word	0x4002640f
 8000474:	40026000 	.word	0x40026000
 8000478:	40026400 	.word	0x40026400

0800047c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a10      	ldr	r2, [pc, #64]	; (80004cc <DMA_ClearFlag+0x50>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d802      	bhi.n	8000494 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <DMA_ClearFlag+0x54>)
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e001      	b.n	8000498 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <DMA_ClearFlag+0x58>)
 8000496:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d007      	beq.n	80004b2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80004a8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80004b0:	e006      	b.n	80004c0 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80004b8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	6093      	str	r3, [r2, #8]
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	4002640f 	.word	0x4002640f
 80004d0:	40026000 	.word	0x40026000
 80004d4:	40026400 	.word	0x40026400

080004d8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80004e4:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <EXTI_Init+0xe0>)
 80004e6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	799b      	ldrb	r3, [r3, #6]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d04f      	beq.n	8000590 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80004f0:	4931      	ldr	r1, [pc, #196]	; (80005b8 <EXTI_Init+0xe0>)
 80004f2:	4b31      	ldr	r3, [pc, #196]	; (80005b8 <EXTI_Init+0xe0>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	43db      	mvns	r3, r3
 80004fc:	4013      	ands	r3, r2
 80004fe:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000500:	492d      	ldr	r1, [pc, #180]	; (80005b8 <EXTI_Init+0xe0>)
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <EXTI_Init+0xe0>)
 8000504:	685a      	ldr	r2, [r3, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	43db      	mvns	r3, r3
 800050c:	4013      	ands	r3, r2
 800050e:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	461a      	mov	r2, r3
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	4413      	add	r3, r2
 800051a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	6811      	ldr	r1, [r2, #0]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	6812      	ldr	r2, [r2, #0]
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800052a:	4923      	ldr	r1, [pc, #140]	; (80005b8 <EXTI_Init+0xe0>)
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <EXTI_Init+0xe0>)
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	43db      	mvns	r3, r3
 8000536:	4013      	ands	r3, r2
 8000538:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800053a:	491f      	ldr	r1, [pc, #124]	; (80005b8 <EXTI_Init+0xe0>)
 800053c:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <EXTI_Init+0xe0>)
 800053e:	68da      	ldr	r2, [r3, #12]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	43db      	mvns	r3, r3
 8000546:	4013      	ands	r3, r2
 8000548:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	795b      	ldrb	r3, [r3, #5]
 800054e:	2b10      	cmp	r3, #16
 8000550:	d10e      	bne.n	8000570 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000552:	4919      	ldr	r1, [pc, #100]	; (80005b8 <EXTI_Init+0xe0>)
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <EXTI_Init+0xe0>)
 8000556:	689a      	ldr	r2, [r3, #8]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4313      	orrs	r3, r2
 800055e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000560:	4915      	ldr	r1, [pc, #84]	; (80005b8 <EXTI_Init+0xe0>)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <EXTI_Init+0xe0>)
 8000564:	68da      	ldr	r2, [r3, #12]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4313      	orrs	r3, r2
 800056c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800056e:	e01d      	b.n	80005ac <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <EXTI_Init+0xe0>)
 8000572:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	461a      	mov	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	4413      	add	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	6811      	ldr	r1, [r2, #0]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	6812      	ldr	r2, [r2, #0]
 800058a:	430a      	orrs	r2, r1
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	e00d      	b.n	80005ac <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	461a      	mov	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	6811      	ldr	r1, [r2, #0]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	6812      	ldr	r2, [r2, #0]
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	400a      	ands	r2, r1
 80005aa:	601a      	str	r2, [r3, #0]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40013c00 	.word	0x40013c00

080005bc <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <EXTI_GetITStatus+0x44>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4013      	ands	r3, r2
 80005d4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <EXTI_GetITStatus+0x44>)
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4013      	ands	r3, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d005      	beq.n	80005ee <EXTI_GetITStatus+0x32>
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e001      	b.n	80005f2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40013c00 	.word	0x40013c00

08000604 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <EXTI_ClearITPendingBit+0x1c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6153      	str	r3, [r2, #20]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40013c00 	.word	0x40013c00

08000624 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000624:	b480      	push	{r7}
 8000626:	b087      	sub	sp, #28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e076      	b.n	800072e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000640:	2201      	movs	r2, #1
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4013      	ands	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d165      	bne.n	8000728 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	2103      	movs	r1, #3
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	401a      	ands	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	4619      	mov	r1, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	431a      	orrs	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d003      	beq.n	800069a <GPIO_Init+0x76>
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d12e      	bne.n	80006f8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	2103      	movs	r1, #3
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	401a      	ands	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	795b      	ldrb	r3, [r3, #5]
 80006b8:	4619      	mov	r1, r3
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685a      	ldr	r2, [r3, #4]
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	2301      	movs	r3, #1
 80006d4:	408b      	lsls	r3, r1
 80006d6:	43db      	mvns	r3, r3
 80006d8:	401a      	ands	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	7992      	ldrb	r2, [r2, #6]
 80006e6:	4611      	mov	r1, r2
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	b292      	uxth	r2, r2
 80006ec:	fa01 f202 	lsl.w	r2, r1, r2
 80006f0:	b292      	uxth	r2, r2
 80006f2:	431a      	orrs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	68da      	ldr	r2, [r3, #12]
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	2103      	movs	r1, #3
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	43db      	mvns	r3, r3
 800070a:	401a      	ands	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	79db      	ldrb	r3, [r3, #7]
 8000718:	4619      	mov	r1, r3
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	3301      	adds	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d985      	bls.n	8000640 <GPIO_Init+0x1c>
    }
  }
}
 8000734:	bf00      	nop
 8000736:	371c      	adds	r7, #28
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	887a      	ldrh	r2, [r7, #2]
 8000750:	831a      	strh	r2, [r3, #24]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	460b      	mov	r3, r1
 8000768:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	887a      	ldrh	r2, [r7, #2]
 800076e:	835a      	strh	r2, [r3, #26]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d006      	beq.n	800079c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800078e:	490a      	ldr	r1, [pc, #40]	; (80007b8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4313      	orrs	r3, r2
 8000798:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800079a:	e006      	b.n	80007aa <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800079c:	4906      	ldr	r1, [pc, #24]	; (80007b8 <RCC_AHB1PeriphClockCmd+0x3c>)
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4013      	ands	r3, r2
 80007a8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d006      	beq.n	80007dc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007ce:	490a      	ldr	r1, [pc, #40]	; (80007f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007da:	e006      	b.n	80007ea <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007dc:	4906      	ldr	r1, [pc, #24]	; (80007f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	43db      	mvns	r3, r3
 80007e6:	4013      	ands	r3, r2
 80007e8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	887a      	ldrh	r2, [r7, #2]
 800080c:	819a      	strh	r2, [r3, #12]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800081a:	b480      	push	{r7}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	460b      	mov	r3, r1
 8000824:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	b29a      	uxth	r2, r3
 8000830:	887b      	ldrh	r3, [r7, #2]
 8000832:	4013      	ands	r3, r2
 8000834:	b29b      	uxth	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d002      	beq.n	8000840 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800083a:	2301      	movs	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e001      	b.n	8000844 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000844:	7bfb      	ldrb	r3, [r7, #15]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000858:	4b38      	ldr	r3, [pc, #224]	; (800093c <Audio_MAL_IRQHandler+0xe8>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b38      	ldr	r3, [pc, #224]	; (8000940 <Audio_MAL_IRQHandler+0xec>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	4610      	mov	r0, r2
 8000864:	f7ff fdce 	bl	8000404 <DMA_GetFlagStatus>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d064      	beq.n	8000938 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800086e:	4b35      	ldr	r3, [pc, #212]	; (8000944 <Audio_MAL_IRQHandler+0xf0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d04c      	beq.n	8000910 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000876:	bf00      	nop
 8000878:	4b30      	ldr	r3, [pc, #192]	; (800093c <Audio_MAL_IRQHandler+0xe8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fda9 	bl	80003d4 <DMA_GetCmdStatus>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1f7      	bne.n	8000878 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000888:	4b2c      	ldr	r3, [pc, #176]	; (800093c <Audio_MAL_IRQHandler+0xe8>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <Audio_MAL_IRQHandler+0xec>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	4610      	mov	r0, r2
 8000894:	f7ff fdf2 	bl	800047c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <Audio_MAL_IRQHandler+0xf4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <Audio_MAL_IRQHandler+0xf8>)
 80008a0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <Audio_MAL_IRQHandler+0xf0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008aa:	4293      	cmp	r3, r2
 80008ac:	bf28      	it	cs
 80008ae:	4613      	movcs	r3, r2
 80008b0:	4a26      	ldr	r2, [pc, #152]	; (800094c <Audio_MAL_IRQHandler+0xf8>)
 80008b2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <Audio_MAL_IRQHandler+0xe8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4924      	ldr	r1, [pc, #144]	; (800094c <Audio_MAL_IRQHandler+0xf8>)
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fd16 	bl	80002ec <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <Audio_MAL_IRQHandler+0xe8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2101      	movs	r1, #1
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fd68 	bl	800039c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <Audio_MAL_IRQHandler+0xf4>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <Audio_MAL_IRQHandler+0xf0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d8:	d203      	bcs.n	80008e2 <Audio_MAL_IRQHandler+0x8e>
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <Audio_MAL_IRQHandler+0xf0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	e000      	b.n	80008e4 <Audio_MAL_IRQHandler+0x90>
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <Audio_MAL_IRQHandler+0xfc>)
 80008e4:	4413      	add	r3, r2
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <Audio_MAL_IRQHandler+0xf4>)
 80008e8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <Audio_MAL_IRQHandler+0xf0>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <Audio_MAL_IRQHandler+0xf0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008f6:	428b      	cmp	r3, r1
 80008f8:	bf28      	it	cs
 80008fa:	460b      	movcs	r3, r1
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	4a11      	ldr	r2, [pc, #68]	; (8000944 <Audio_MAL_IRQHandler+0xf0>)
 8000900:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <Audio_MAL_IRQHandler+0xe8>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2101      	movs	r1, #1
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fd47 	bl	800039c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800090e:	e013      	b.n	8000938 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <Audio_MAL_IRQHandler+0xe8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fd40 	bl	800039c <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <Audio_MAL_IRQHandler+0xe8>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <Audio_MAL_IRQHandler+0xec>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	4610      	mov	r0, r2
 8000928:	f7ff fda8 	bl	800047c <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <Audio_MAL_IRQHandler+0xf4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f9a6 	bl	8000c84 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000008 	.word	0x20000008
 8000940:	2000000c 	.word	0x2000000c
 8000944:	20000000 	.word	0x20000000
 8000948:	2000002c 	.word	0x2000002c
 800094c:	2000006c 	.word	0x2000006c
 8000950:	0001fffe 	.word	0x0001fffe

08000954 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000958:	f7ff ff7c 	bl	8000854 <Audio_MAL_IRQHandler>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000964:	f7ff ff76 	bl	8000854 <Audio_MAL_IRQHandler>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000970:	2102      	movs	r1, #2
 8000972:	480d      	ldr	r0, [pc, #52]	; (80009a8 <SPI3_IRQHandler+0x3c>)
 8000974:	f7ff ff51 	bl	800081a <SPI_I2S_GetFlagStatus>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d011      	beq.n	80009a2 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <SPI3_IRQHandler+0x40>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d106      	bne.n	8000994 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000986:	f000 f988 	bl	8000c9a <EVAL_AUDIO_GetSampleCallBack>
 800098a:	4603      	mov	r3, r0
 800098c:	4619      	mov	r1, r3
 800098e:	2004      	movs	r0, #4
 8000990:	f7ff fc90 	bl	80002b4 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000994:	f000 f981 	bl	8000c9a <EVAL_AUDIO_GetSampleCallBack>
 8000998:	4603      	mov	r3, r0
 800099a:	4619      	mov	r1, r3
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <SPI3_IRQHandler+0x3c>)
 800099e:	f7ff ff2d 	bl	80007fc <SPI_I2S_SendData>
  }
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40003c00 	.word	0x40003c00
 80009ac:	20000004 	.word	0x20000004

080009b0 <RCC_Config>:
GPIO_InitTypeDef GPIO_InitStruct;
EXTI_InitTypeDef EXTI_InitStruct;
NVIC_InitTypeDef NVIC_InitStruct;


void RCC_Config(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 80009b4:	2101      	movs	r1, #1
 80009b6:	2008      	movs	r0, #8
 80009b8:	f7ff fee0 	bl	800077c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 80009bc:	2101      	movs	r1, #1
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff fedc 	bl	800077c <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 80009c4:	2101      	movs	r1, #1
 80009c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009ca:	f7ff fef7 	bl	80007bc <RCC_APB2PeriphClockCmd>
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <GPIO_Config>:

void GPIO_Config(void){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <GPIO_Config+0x58>)
 80009da:	2201      	movs	r2, #1
 80009dc:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <GPIO_Config+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = (GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <GPIO_Config+0x58>)
 80009e6:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80009ea:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <GPIO_Config+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <GPIO_Config+0x58>)
 80009f4:	2203      	movs	r2, #3
 80009f6:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOD,&GPIO_InitStruct);
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <GPIO_Config+0x58>)
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <GPIO_Config+0x5c>)
 80009fc:	f7ff fe12 	bl	8000624 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <GPIO_Config+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <GPIO_Config+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = (GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_4);
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <GPIO_Config+0x58>)
 8000a0e:	2219      	movs	r2, #25
 8000a10:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <GPIO_Config+0x58>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <GPIO_Config+0x58>)
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000a1e:	4903      	ldr	r1, [pc, #12]	; (8000a2c <GPIO_Config+0x58>)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <GPIO_Config+0x60>)
 8000a22:	f7ff fdff 	bl	8000624 <GPIO_Init>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000a8 	.word	0x200000a8
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40020000 	.word	0x40020000

08000a38 <EXTI_Config>:

void EXTI_Config(void){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

	EXTI_InitStruct.EXTI_Line = (EXTI_Line0 |EXTI_Line3 | EXTI_Line4);
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <EXTI_Config+0x28>)
 8000a3e:	2219      	movs	r2, #25
 8000a40:	601a      	str	r2, [r3, #0]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <EXTI_Config+0x28>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	719a      	strb	r2, [r3, #6]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <EXTI_Config+0x28>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	711a      	strb	r2, [r3, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <EXTI_Config+0x28>)
 8000a50:	2208      	movs	r2, #8
 8000a52:	715a      	strb	r2, [r3, #5]
	EXTI_Init(&EXTI_InitStruct);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <EXTI_Config+0x28>)
 8000a56:	f7ff fd3f 	bl	80004d8 <EXTI_Init>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000b4 	.word	0x200000b4

08000a64 <NVIC_Config>:

void NVIC_Config(void){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

	//NVIC priority group belirle
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_3);
 8000a68:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a6c:	f7ff fbac 	bl	80001c8 <NVIC_PriorityGroupConfig>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <NVIC_Config+0x6c>)
 8000a72:	2206      	movs	r2, #6
 8000a74:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd =ENABLE;
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <NVIC_Config+0x6c>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	70da      	strb	r2, [r3, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;  // en oncelikli
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <NVIC_Config+0x6c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	705a      	strb	r2, [r3, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <NVIC_Config+0x6c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStruct);
 8000a88:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <NVIC_Config+0x6c>)
 8000a8a:	f7ff fbb1 	bl	80001f0 <NVIC_Init>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI3_IRQn;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <NVIC_Config+0x6c>)
 8000a90:	2209      	movs	r2, #9
 8000a92:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd =ENABLE;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <NVIC_Config+0x6c>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	70da      	strb	r2, [r3, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority =1;   // orta oncelikli
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <NVIC_Config+0x6c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	705a      	strb	r2, [r3, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <NVIC_Config+0x6c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStruct);
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <NVIC_Config+0x6c>)
 8000aa8:	f7ff fba2 	bl	80001f0 <NVIC_Init>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI4_IRQn;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <NVIC_Config+0x6c>)
 8000aae:	220a      	movs	r2, #10
 8000ab0:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd =ENABLE;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <NVIC_Config+0x6c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	70da      	strb	r2, [r3, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 2;  // dusuk oncelikli
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <NVIC_Config+0x6c>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	705a      	strb	r2, [r3, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <NVIC_Config+0x6c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStruct);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <NVIC_Config+0x6c>)
 8000ac6:	f7ff fb93 	bl	80001f0 <NVIC_Init>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000b0 	.word	0x200000b0

08000ad4 <delay>:

void delay(uint32_t time){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	while(time--);
 8000adc:	bf00      	nop
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	1e5a      	subs	r2, r3, #1
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1fa      	bne.n	8000ade <delay+0xa>
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	// en oncelikli
	if(EXTI_GetITStatus(EXTI_Line0) != RESET){ // flag kontrol
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fd5f 	bl	80005bc <EXTI_GetITStatus>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d037      	beq.n	8000b74 <EXTI0_IRQHandler+0x80>

		GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000b04:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b08:	481b      	ldr	r0, [pc, #108]	; (8000b78 <EXTI0_IRQHandler+0x84>)
 8000b0a:	f7ff fe28 	bl	800075e <GPIO_ResetBits>
				GPIO_SetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000b0e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b12:	4819      	ldr	r0, [pc, #100]	; (8000b78 <EXTI0_IRQHandler+0x84>)
 8000b14:	f7ff fe14 	bl	8000740 <GPIO_SetBits>
				delay(1680000);
 8000b18:	4818      	ldr	r0, [pc, #96]	; (8000b7c <EXTI0_IRQHandler+0x88>)
 8000b1a:	f7ff ffdb 	bl	8000ad4 <delay>
				GPIO_ResetBits(GPIOD,GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000b1e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b22:	4815      	ldr	r0, [pc, #84]	; (8000b78 <EXTI0_IRQHandler+0x84>)
 8000b24:	f7ff fe1b 	bl	800075e <GPIO_ResetBits>
				delay(16800000);
 8000b28:	4815      	ldr	r0, [pc, #84]	; (8000b80 <EXTI0_IRQHandler+0x8c>)
 8000b2a:	f7ff ffd3 	bl	8000ad4 <delay>
				GPIO_SetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000b2e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <EXTI0_IRQHandler+0x84>)
 8000b34:	f7ff fe04 	bl	8000740 <GPIO_SetBits>
				delay(1680000);
 8000b38:	4810      	ldr	r0, [pc, #64]	; (8000b7c <EXTI0_IRQHandler+0x88>)
 8000b3a:	f7ff ffcb 	bl	8000ad4 <delay>
				GPIO_ResetBits(GPIOD,GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000b3e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <EXTI0_IRQHandler+0x84>)
 8000b44:	f7ff fe0b 	bl	800075e <GPIO_ResetBits>
				delay(16800000);
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <EXTI0_IRQHandler+0x8c>)
 8000b4a:	f7ff ffc3 	bl	8000ad4 <delay>
				GPIO_SetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000b4e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <EXTI0_IRQHandler+0x84>)
 8000b54:	f7ff fdf4 	bl	8000740 <GPIO_SetBits>
				delay(1680000);
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <EXTI0_IRQHandler+0x88>)
 8000b5a:	f7ff ffbb 	bl	8000ad4 <delay>
				GPIO_ResetBits(GPIOD,GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000b5e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <EXTI0_IRQHandler+0x84>)
 8000b64:	f7ff fdfb 	bl	800075e <GPIO_ResetBits>
			    delay(16800000);
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <EXTI0_IRQHandler+0x8c>)
 8000b6a:	f7ff ffb3 	bl	8000ad4 <delay>
		EXTI_ClearITPendingBit(EXTI_Line0); // clear flag
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff fd48 	bl	8000604 <EXTI_ClearITPendingBit>
	}
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40020c00 	.word	0x40020c00
 8000b7c:	0019a280 	.word	0x0019a280
 8000b80:	01005900 	.word	0x01005900

08000b84 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	// orta oncelikli
	if(EXTI_GetITStatus(EXTI_Line3) != RESET){
 8000b88:	2008      	movs	r0, #8
 8000b8a:	f7ff fd17 	bl	80005bc <EXTI_GetITStatus>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d027      	beq.n	8000be4 <EXTI3_IRQHandler+0x60>

		GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000b94:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <EXTI3_IRQHandler+0x64>)
 8000b9a:	f7ff fde0 	bl	800075e <GPIO_ResetBits>
			GPIO_SetBits(GPIOD,GPIO_Pin_12);
 8000b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba2:	4811      	ldr	r0, [pc, #68]	; (8000be8 <EXTI3_IRQHandler+0x64>)
 8000ba4:	f7ff fdcc 	bl	8000740 <GPIO_SetBits>
			delay(16800000);
 8000ba8:	4810      	ldr	r0, [pc, #64]	; (8000bec <EXTI3_IRQHandler+0x68>)
 8000baa:	f7ff ff93 	bl	8000ad4 <delay>
			GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <EXTI3_IRQHandler+0x64>)
 8000bb4:	f7ff fdc4 	bl	8000740 <GPIO_SetBits>
			delay(16800000);
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <EXTI3_IRQHandler+0x68>)
 8000bba:	f7ff ff8b 	bl	8000ad4 <delay>
			GPIO_SetBits(GPIOD, GPIO_Pin_14);
 8000bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc2:	4809      	ldr	r0, [pc, #36]	; (8000be8 <EXTI3_IRQHandler+0x64>)
 8000bc4:	f7ff fdbc 	bl	8000740 <GPIO_SetBits>
			delay(16800000);
 8000bc8:	4808      	ldr	r0, [pc, #32]	; (8000bec <EXTI3_IRQHandler+0x68>)
 8000bca:	f7ff ff83 	bl	8000ad4 <delay>
			GPIO_SetBits(GPIOD, GPIO_Pin_15);
 8000bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <EXTI3_IRQHandler+0x64>)
 8000bd4:	f7ff fdb4 	bl	8000740 <GPIO_SetBits>
			delay(16900000);
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <EXTI3_IRQHandler+0x6c>)
 8000bda:	f7ff ff7b 	bl	8000ad4 <delay>
		EXTI_ClearITPendingBit(EXTI_Line3);
 8000bde:	2008      	movs	r0, #8
 8000be0:	f7ff fd10 	bl	8000604 <EXTI_ClearITPendingBit>
	}

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	01005900 	.word	0x01005900
 8000bf0:	0101dfa0 	.word	0x0101dfa0

08000bf4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	// dusuk oncelikli

	if(EXTI_GetITStatus(EXTI_Line4)!= RESET){
 8000bf8:	2010      	movs	r0, #16
 8000bfa:	f7ff fcdf 	bl	80005bc <EXTI_GetITStatus>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d027      	beq.n	8000c54 <EXTI4_IRQHandler+0x60>
		GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000c04:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c08:	4813      	ldr	r0, [pc, #76]	; (8000c58 <EXTI4_IRQHandler+0x64>)
 8000c0a:	f7ff fda8 	bl	800075e <GPIO_ResetBits>
			GPIO_SetBits(GPIOD,GPIO_Pin_15);
 8000c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <EXTI4_IRQHandler+0x64>)
 8000c14:	f7ff fd94 	bl	8000740 <GPIO_SetBits>
			delay(16800000);
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <EXTI4_IRQHandler+0x68>)
 8000c1a:	f7ff ff5b 	bl	8000ad4 <delay>
			GPIO_SetBits(GPIOD,GPIO_Pin_14);
 8000c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <EXTI4_IRQHandler+0x64>)
 8000c24:	f7ff fd8c 	bl	8000740 <GPIO_SetBits>
			delay(16800000);
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <EXTI4_IRQHandler+0x68>)
 8000c2a:	f7ff ff53 	bl	8000ad4 <delay>
			GPIO_SetBits(GPIOD,GPIO_Pin_13);
 8000c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <EXTI4_IRQHandler+0x64>)
 8000c34:	f7ff fd84 	bl	8000740 <GPIO_SetBits>
			delay(16800000);
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <EXTI4_IRQHandler+0x68>)
 8000c3a:	f7ff ff4b 	bl	8000ad4 <delay>
			GPIO_SetBits(GPIOD,GPIO_Pin_12);
 8000c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <EXTI4_IRQHandler+0x64>)
 8000c44:	f7ff fd7c 	bl	8000740 <GPIO_SetBits>
			delay(16800000);
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <EXTI4_IRQHandler+0x68>)
 8000c4a:	f7ff ff43 	bl	8000ad4 <delay>
		EXTI_ClearITPendingBit(EXTI_Line4);
 8000c4e:	2010      	movs	r0, #16
 8000c50:	f7ff fcd8 	bl	8000604 <EXTI_ClearITPendingBit>
	}

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	01005900 	.word	0x01005900

08000c60 <main>:

int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	RCC_Config();
 8000c64:	f7ff fea4 	bl	80009b0 <RCC_Config>
	GPIO_Config();
 8000c68:	f7ff feb4 	bl	80009d4 <GPIO_Config>
	EXTI_Config();
 8000c6c:	f7ff fee4 	bl	8000a38 <EXTI_Config>
	NVIC_Config();
 8000c70:	f7ff fef8 	bl	8000a64 <NVIC_Config>

  while (1)
  {
	GPIO_ResetBits(GPIOD,GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000c74:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c78:	4801      	ldr	r0, [pc, #4]	; (8000c80 <main+0x20>)
 8000c7a:	f7ff fd70 	bl	800075e <GPIO_ResetBits>
 8000c7e:	e7f9      	b.n	8000c74 <main+0x14>
 8000c80:	40020c00 	.word	0x40020c00

08000c84 <EVAL_AUDIO_TransferComplete_CallBack>:
  }
}


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000c8e:	bf00      	nop
}
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8000c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cb2:	e003      	b.n	8000cbc <LoopCopyDataInit>

08000cb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cba:	3104      	adds	r1, #4

08000cbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cc4:	d3f6      	bcc.n	8000cb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cc8:	e002      	b.n	8000cd0 <LoopFillZerobss>

08000cca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ccc:	f842 3b04 	str.w	r3, [r2], #4

08000cd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cd4:	d3f9      	bcc.n	8000cca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cd6:	f000 f841 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f000 f8f1 	bl	8000ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff ffbf 	bl	8000c60 <main>
  bx  lr    
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ce8:	08000f28 	.word	0x08000f28
  ldr  r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cf0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000cf4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000cf8:	200000bc 	.word	0x200000bc

08000cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>

08000cfe <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <HardFault_Handler+0x4>

08000d12 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <MemManage_Handler+0x4>

08000d18 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <BusFault_Handler+0x4>

08000d1e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <UsageFault_Handler+0x4>

08000d24 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <SystemInit+0x60>)
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <SystemInit+0x60>)
 8000d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d70:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <SystemInit+0x64>)
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <SystemInit+0x64>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <SystemInit+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <SystemInit+0x64>)
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <SystemInit+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <SystemInit+0x64>)
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <SystemInit+0x68>)
 8000d96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d98:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <SystemInit+0x64>)
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <SystemInit+0x64>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000daa:	f000 f80d 	bl	8000dc8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dae:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <SystemInit+0x60>)
 8000db0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000db4:	609a      	str	r2, [r3, #8]
#endif
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	24003010 	.word	0x24003010

08000dc8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000dd6:	4a36      	ldr	r2, [pc, #216]	; (8000eb0 <SetSysClock+0xe8>)
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <SetSysClock+0xe8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000de2:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <SetSysClock+0xe8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3301      	adds	r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d103      	bne.n	8000e00 <SetSysClock+0x38>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000dfe:	d1f0      	bne.n	8000de2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <SetSysClock+0xe8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	e001      	b.n	8000e16 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d142      	bne.n	8000ea2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000e1c:	4a24      	ldr	r2, [pc, #144]	; (8000eb0 <SetSysClock+0xe8>)
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <SetSysClock+0xe8>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000e28:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <SetSysClock+0xec>)
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <SetSysClock+0xec>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e32:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000e34:	4a1e      	ldr	r2, [pc, #120]	; (8000eb0 <SetSysClock+0xe8>)
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <SetSysClock+0xe8>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <SetSysClock+0xe8>)
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <SetSysClock+0xe8>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e46:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000e48:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <SetSysClock+0xe8>)
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <SetSysClock+0xe8>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000e52:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <SetSysClock+0xe8>)
 8000e56:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <SetSysClock+0xf0>)
 8000e58:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e5a:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <SetSysClock+0xe8>)
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <SetSysClock+0xe8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e64:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e66:	bf00      	nop
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <SetSysClock+0xe8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f9      	beq.n	8000e68 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <SetSysClock+0xf4>)
 8000e76:	f240 6205 	movw	r2, #1541	; 0x605
 8000e7a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <SetSysClock+0xe8>)
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <SetSysClock+0xe8>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f023 0303 	bic.w	r3, r3, #3
 8000e86:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000e88:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <SetSysClock+0xe8>)
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <SetSysClock+0xe8>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000e94:	bf00      	nop
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SetSysClock+0xe8>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d1f9      	bne.n	8000e96 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000
 8000eb8:	07405408 	.word	0x07405408
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <__libc_init_array>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	4e0d      	ldr	r6, [pc, #52]	; (8000ef8 <__libc_init_array+0x38>)
 8000ec4:	4c0d      	ldr	r4, [pc, #52]	; (8000efc <__libc_init_array+0x3c>)
 8000ec6:	1ba4      	subs	r4, r4, r6
 8000ec8:	10a4      	asrs	r4, r4, #2
 8000eca:	2500      	movs	r5, #0
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	d109      	bne.n	8000ee4 <__libc_init_array+0x24>
 8000ed0:	4e0b      	ldr	r6, [pc, #44]	; (8000f00 <__libc_init_array+0x40>)
 8000ed2:	4c0c      	ldr	r4, [pc, #48]	; (8000f04 <__libc_init_array+0x44>)
 8000ed4:	f000 f818 	bl	8000f08 <_init>
 8000ed8:	1ba4      	subs	r4, r4, r6
 8000eda:	10a4      	asrs	r4, r4, #2
 8000edc:	2500      	movs	r5, #0
 8000ede:	42a5      	cmp	r5, r4
 8000ee0:	d105      	bne.n	8000eee <__libc_init_array+0x2e>
 8000ee2:	bd70      	pop	{r4, r5, r6, pc}
 8000ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ee8:	4798      	blx	r3
 8000eea:	3501      	adds	r5, #1
 8000eec:	e7ee      	b.n	8000ecc <__libc_init_array+0xc>
 8000eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ef2:	4798      	blx	r3
 8000ef4:	3501      	adds	r5, #1
 8000ef6:	e7f2      	b.n	8000ede <__libc_init_array+0x1e>
 8000ef8:	08000f20 	.word	0x08000f20
 8000efc:	08000f20 	.word	0x08000f20
 8000f00:	08000f20 	.word	0x08000f20
 8000f04:	08000f24 	.word	0x08000f24

08000f08 <_init>:
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0a:	bf00      	nop
 8000f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f0e:	bc08      	pop	{r3}
 8000f10:	469e      	mov	lr, r3
 8000f12:	4770      	bx	lr

08000f14 <_fini>:
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	bf00      	nop
 8000f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1a:	bc08      	pop	{r3}
 8000f1c:	469e      	mov	lr, r3
 8000f1e:	4770      	bx	lr
