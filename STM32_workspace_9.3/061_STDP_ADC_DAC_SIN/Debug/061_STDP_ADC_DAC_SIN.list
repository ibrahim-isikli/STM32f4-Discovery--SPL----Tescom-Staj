
061_STDP_ADC_DAC_SIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a40  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08002bc8  08002bc8  00012bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002da4  08002da4  00012da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000774  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000784  20000784  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005ef2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000010a0  00000000  00000000  00025f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007c8  00000000  00000000  00026fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000720  00000000  00000000  000277a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002a8a  00000000  00000000  00027ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002c87  00000000  00000000  0002a94a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002d5d1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000246c  00000000  00000000  0002d650  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002fabc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002bb0 	.word	0x08002bb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002bb0 	.word	0x08002bb0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bbe:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	791b      	ldrb	r3, [r3, #4]
 8000bc4:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <ADC_Init+0xa8>)
 8000be2:	4013      	ands	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000bee:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000bf4:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	795b      	ldrb	r3, [r3, #5]
 8000bfa:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000c16:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	7d1b      	ldrb	r3, [r3, #20]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	7afb      	ldrb	r3, [r7, #11]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000c26:	7afb      	ldrb	r3, [r7, #11]
 8000c28:	051b      	lsls	r3, r3, #20
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	c0fff7fd 	.word	0xc0fff7fd

08000c48 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <ADC_CommonInit+0x48>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <ADC_CommonInit+0x4c>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000c6a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000c70:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000c76:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <ADC_CommonInit+0x48>)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	6053      	str	r3, [r2, #4]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	40012300 	.word	0x40012300
 8000c94:	fffc30e0 	.word	0xfffc30e0

08000c98 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f043 0201 	orr.w	r2, r3, #1
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000cb6:	e005      	b.n	8000cc4 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f023 0201 	bic.w	r2, r3, #1
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	4608      	mov	r0, r1
 8000cda:	4611      	mov	r1, r2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4603      	mov	r3, r0
 8000ce0:	70fb      	strb	r3, [r7, #3]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	70bb      	strb	r3, [r7, #2]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	2b09      	cmp	r3, #9
 8000cf6:	d923      	bls.n	8000d40 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	f1a3 020a 	sub.w	r2, r3, #10
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000d1c:	7879      	ldrb	r1, [r7, #1]
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	f1a3 020a 	sub.w	r2, r3, #10
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	e01e      	b.n	8000d7e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000d46:	78fa      	ldrb	r2, [r7, #3]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	2207      	movs	r2, #7
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000d60:	7879      	ldrb	r1, [r7, #1]
 8000d62:	78fa      	ldrb	r2, [r7, #3]
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000d7e:	78bb      	ldrb	r3, [r7, #2]
 8000d80:	2b06      	cmp	r3, #6
 8000d82:	d821      	bhi.n	8000dc8 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d88:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000d8a:	78bb      	ldrb	r3, [r7, #2]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	221f      	movs	r2, #31
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	4013      	ands	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000da6:	78f9      	ldrb	r1, [r7, #3]
 8000da8:	78bb      	ldrb	r3, [r7, #2]
 8000daa:	1e5a      	subs	r2, r3, #1
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000dc6:	e047      	b.n	8000e58 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000dc8:	78bb      	ldrb	r3, [r7, #2]
 8000dca:	2b0c      	cmp	r3, #12
 8000dcc:	d821      	bhi.n	8000e12 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000dd4:	78bb      	ldrb	r3, [r7, #2]
 8000dd6:	1fda      	subs	r2, r3, #7
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	221f      	movs	r2, #31
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000df0:	78f9      	ldrb	r1, [r7, #3]
 8000df2:	78bb      	ldrb	r3, [r7, #2]
 8000df4:	1fda      	subs	r2, r3, #7
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000e10:	e022      	b.n	8000e58 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000e18:	78bb      	ldrb	r3, [r7, #2]
 8000e1a:	f1a3 020d 	sub.w	r2, r3, #13
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	221f      	movs	r2, #31
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	4013      	ands	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000e36:	78f9      	ldrb	r1, [r7, #3]
 8000e38:	78bb      	ldrb	r3, [r7, #2]
 8000e3a:	f1a3 020d 	sub.w	r2, r3, #13
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	609a      	str	r2, [r3, #8]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e90:	b29b      	uxth	r3, r3
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d002      	beq.n	8000ec0 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e001      	b.n	8000ec4 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <DAC_Init+0x64>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000eec:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	4013      	ands	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000f0c:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <DAC_Init+0x64>)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6013      	str	r3, [r2, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40007400 	.word	0x40007400

08000f3c <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d009      	beq.n	8000f62 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <DAC_Cmd+0x48>)
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <DAC_Cmd+0x48>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2001      	movs	r0, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	fa00 f303 	lsl.w	r3, r0, r3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000f60:	e009      	b.n	8000f76 <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <DAC_Cmd+0x48>)
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <DAC_Cmd+0x48>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2001      	movs	r0, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	fa00 f303 	lsl.w	r3, r0, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4013      	ands	r3, r2
 8000f74:	600b      	str	r3, [r1, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40007400 	.word	0x40007400

08000f88 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <DAC_SetChannel1Data+0x34>)
 8000f9a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	6013      	str	r3, [r2, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40007400 	.word	0x40007400

08000fc0 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <DAC_SetChannel2Data+0x34>)
 8000fd2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	3314      	adds	r3, #20
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40007400 	.word	0x40007400

08000ff8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <DMA_Init+0xac>)
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001022:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800102e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800103a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001040:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001046:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f023 0307 	bic.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	4313      	orrs	r3, r2
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60da      	str	r2, [r3, #12]
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	f01c803f 	.word	0xf01c803f

080010a8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f043 0201 	orr.w	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80010c6:	e005      	b.n	80010d4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 0201 	bic.w	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	601a      	str	r2, [r3, #0]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e001      	b.n	8001102 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a15      	ldr	r2, [pc, #84]	; (800117c <DMA_GetFlagStatus+0x6c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d802      	bhi.n	8001130 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <DMA_GetFlagStatus+0x70>)
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	e001      	b.n	8001134 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <DMA_GetFlagStatus+0x74>)
 8001132:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e002      	b.n	800114c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001152:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001156:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001162:	2301      	movs	r3, #1
 8001164:	75fb      	strb	r3, [r7, #23]
 8001166:	e001      	b.n	800116c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800116c:	7dfb      	ldrb	r3, [r7, #23]
}
 800116e:	4618      	mov	r0, r3
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	4002640f 	.word	0x4002640f
 8001180:	40026000 	.word	0x40026000
 8001184:	40026400 	.word	0x40026400

08001188 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <DMA_ClearFlag+0x50>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d802      	bhi.n	80011a0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <DMA_ClearFlag+0x54>)
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e001      	b.n	80011a4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <DMA_ClearFlag+0x58>)
 80011a2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80011b4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80011bc:	e006      	b.n	80011cc <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80011c4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	6093      	str	r3, [r2, #8]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	4002640f 	.word	0x4002640f
 80011dc:	40026000 	.word	0x40026000
 80011e0:	40026400 	.word	0x40026400

080011e4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e076      	b.n	80012ee <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001200:	2201      	movs	r2, #1
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	429a      	cmp	r2, r3
 800121a:	d165      	bne.n	80012e8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2103      	movs	r1, #3
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	401a      	ands	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	791b      	ldrb	r3, [r3, #4]
 800123a:	4619      	mov	r1, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	791b      	ldrb	r3, [r3, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d003      	beq.n	800125a <GPIO_Init+0x76>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	791b      	ldrb	r3, [r3, #4]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d12e      	bne.n	80012b8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2103      	movs	r1, #3
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	401a      	ands	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	795b      	ldrb	r3, [r3, #5]
 8001278:	4619      	mov	r1, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	b29b      	uxth	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	2301      	movs	r3, #1
 8001294:	408b      	lsls	r3, r1
 8001296:	43db      	mvns	r3, r3
 8001298:	401a      	ands	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	7992      	ldrb	r2, [r2, #6]
 80012a6:	4611      	mov	r1, r2
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	b292      	uxth	r2, r2
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	b292      	uxth	r2, r2
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2103      	movs	r1, #3
 80012c4:	fa01 f303 	lsl.w	r3, r1, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	401a      	ands	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	79db      	ldrb	r3, [r3, #7]
 80012d8:	4619      	mov	r1, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d985      	bls.n	8001200 <GPIO_Init+0x1c>
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001312:	490a      	ldr	r1, [pc, #40]	; (800133c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800131e:	e006      	b.n	800132e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001320:	4906      	ldr	r1, [pc, #24]	; (800133c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	43db      	mvns	r3, r3
 800132a:	4013      	ands	r3, r2
 800132c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001352:	490a      	ldr	r1, [pc, #40]	; (800137c <RCC_APB1PeriphClockCmd+0x3c>)
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <RCC_APB1PeriphClockCmd+0x3c>)
 8001356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4313      	orrs	r3, r2
 800135c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800135e:	e006      	b.n	800136e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001360:	4906      	ldr	r1, [pc, #24]	; (800137c <RCC_APB1PeriphClockCmd+0x3c>)
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <RCC_APB1PeriphClockCmd+0x3c>)
 8001364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	43db      	mvns	r3, r3
 800136a:	4013      	ands	r3, r2
 800136c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001392:	490a      	ldr	r1, [pc, #40]	; (80013bc <RCC_APB2PeriphClockCmd+0x3c>)
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <RCC_APB2PeriphClockCmd+0x3c>)
 8001396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4313      	orrs	r3, r2
 800139c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800139e:	e006      	b.n	80013ae <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80013a0:	4906      	ldr	r1, [pc, #24]	; (80013bc <RCC_APB2PeriphClockCmd+0x3c>)
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <RCC_APB2PeriphClockCmd+0x3c>)
 80013a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	4013      	ands	r3, r2
 80013ac:	644b      	str	r3, [r1, #68]	; 0x44
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	819a      	strh	r2, [r3, #12]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80013de:	b480      	push	{r7}
 80013e0:	b085      	sub	sp, #20
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	891b      	ldrh	r3, [r3, #8]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	4013      	ands	r3, r2
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e001      	b.n	8001408 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800141c:	4b38      	ldr	r3, [pc, #224]	; (8001500 <Audio_MAL_IRQHandler+0xe8>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b38      	ldr	r3, [pc, #224]	; (8001504 <Audio_MAL_IRQHandler+0xec>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f7ff fe72 	bl	8001110 <DMA_GetFlagStatus>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d064      	beq.n	80014fc <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8001432:	4b35      	ldr	r3, [pc, #212]	; (8001508 <Audio_MAL_IRQHandler+0xf0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d04c      	beq.n	80014d4 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800143a:	bf00      	nop
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <Audio_MAL_IRQHandler+0xe8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fe4d 	bl	80010e0 <DMA_GetCmdStatus>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f7      	bne.n	800143c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <Audio_MAL_IRQHandler+0xe8>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <Audio_MAL_IRQHandler+0xec>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f7ff fe96 	bl	8001188 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <Audio_MAL_IRQHandler+0xf4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <Audio_MAL_IRQHandler+0xf8>)
 8001464:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <Audio_MAL_IRQHandler+0xf0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146e:	4293      	cmp	r3, r2
 8001470:	bf28      	it	cs
 8001472:	4613      	movcs	r3, r2
 8001474:	4a26      	ldr	r2, [pc, #152]	; (8001510 <Audio_MAL_IRQHandler+0xf8>)
 8001476:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <Audio_MAL_IRQHandler+0xe8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4924      	ldr	r1, [pc, #144]	; (8001510 <Audio_MAL_IRQHandler+0xf8>)
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fdba 	bl	8000ff8 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <Audio_MAL_IRQHandler+0xe8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fe0c 	bl	80010a8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <Audio_MAL_IRQHandler+0xf4>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <Audio_MAL_IRQHandler+0xf0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149c:	d203      	bcs.n	80014a6 <Audio_MAL_IRQHandler+0x8e>
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <Audio_MAL_IRQHandler+0xf0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	e000      	b.n	80014a8 <Audio_MAL_IRQHandler+0x90>
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <Audio_MAL_IRQHandler+0xfc>)
 80014a8:	4413      	add	r3, r2
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <Audio_MAL_IRQHandler+0xf4>)
 80014ac:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <Audio_MAL_IRQHandler+0xf0>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <Audio_MAL_IRQHandler+0xf0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014ba:	428b      	cmp	r3, r1
 80014bc:	bf28      	it	cs
 80014be:	460b      	movcs	r3, r1
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	4a11      	ldr	r2, [pc, #68]	; (8001508 <Audio_MAL_IRQHandler+0xf0>)
 80014c4:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <Audio_MAL_IRQHandler+0xe8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2101      	movs	r1, #1
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fdeb 	bl	80010a8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80014d2:	e013      	b.n	80014fc <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <Audio_MAL_IRQHandler+0xe8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fde4 	bl	80010a8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <Audio_MAL_IRQHandler+0xe8>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <Audio_MAL_IRQHandler+0xec>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	4610      	mov	r0, r2
 80014ec:	f7ff fe4c 	bl	8001188 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <Audio_MAL_IRQHandler+0xf4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f9d2 	bl	80018a0 <EVAL_AUDIO_TransferComplete_CallBack>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000008 	.word	0x20000008
 8001504:	2000000c 	.word	0x2000000c
 8001508:	20000000 	.word	0x20000000
 800150c:	2000002c 	.word	0x2000002c
 8001510:	2000006c 	.word	0x2000006c
 8001514:	0001fffe 	.word	0x0001fffe

08001518 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800151c:	f7ff ff7c 	bl	8001418 <Audio_MAL_IRQHandler>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001528:	f7ff ff76 	bl	8001418 <Audio_MAL_IRQHandler>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001534:	2102      	movs	r1, #2
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <SPI3_IRQHandler+0x3c>)
 8001538:	f7ff ff51 	bl	80013de <SPI_I2S_GetFlagStatus>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d011      	beq.n	8001566 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <SPI3_IRQHandler+0x40>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d106      	bne.n	8001558 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800154a:	f000 f9b4 	bl	80018b6 <EVAL_AUDIO_GetSampleCallBack>
 800154e:	4603      	mov	r3, r0
 8001550:	4619      	mov	r1, r3
 8001552:	2004      	movs	r0, #4
 8001554:	f7ff fd18 	bl	8000f88 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001558:	f000 f9ad 	bl	80018b6 <EVAL_AUDIO_GetSampleCallBack>
 800155c:	4603      	mov	r3, r0
 800155e:	4619      	mov	r1, r3
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <SPI3_IRQHandler+0x3c>)
 8001562:	f7ff ff2d 	bl	80013c0 <SPI_I2S_SendData>
  }
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40003c00 	.word	0x40003c00
 8001570:	20000004 	.word	0x20000004

08001574 <RCC_Config>:
float adc2_value;
float PiktoPik;
uint32_t sine_val[420];
#define pi 3.1415926

void RCC_Config(void){
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8001578:	2101      	movs	r1, #1
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff fec0 	bl	8001300 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
 8001580:	2101      	movs	r1, #1
 8001582:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001586:	f7ff fefb 	bl	8001380 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2,ENABLE);
 800158a:	2101      	movs	r1, #1
 800158c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001590:	f7ff fef6 	bl	8001380 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC,ENABLE);
 8001594:	2101      	movs	r1, #1
 8001596:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800159a:	f7ff fed1 	bl	8001340 <RCC_APB1PeriphClockCmd>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <GPIO_Config>:

void GPIO_Config(void){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	// DAC pa5
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <GPIO_Config+0x7c>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <GPIO_Config+0x7c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <GPIO_Config+0x7c>)
 80015b6:	2220      	movs	r2, #32
 80015b8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <GPIO_Config+0x7c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <GPIO_Config+0x7c>)
 80015c2:	2203      	movs	r2, #3
 80015c4:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 80015c6:	4916      	ldr	r1, [pc, #88]	; (8001620 <GPIO_Config+0x7c>)
 80015c8:	4816      	ldr	r0, [pc, #88]	; (8001624 <GPIO_Config+0x80>)
 80015ca:	f7ff fe0b 	bl	80011e4 <GPIO_Init>

	// ADC1 pa1
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <GPIO_Config+0x7c>)
 80015d0:	2203      	movs	r2, #3
 80015d2:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <GPIO_Config+0x7c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <GPIO_Config+0x7c>)
 80015dc:	2202      	movs	r2, #2
 80015de:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <GPIO_Config+0x7c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <GPIO_Config+0x7c>)
 80015e8:	2203      	movs	r2, #3
 80015ea:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <GPIO_Config+0x7c>)
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <GPIO_Config+0x80>)
 80015f0:	f7ff fdf8 	bl	80011e4 <GPIO_Init>

	// ADC2 pa2
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <GPIO_Config+0x7c>)
 80015f6:	2203      	movs	r2, #3
 80015f8:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <GPIO_Config+0x7c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <GPIO_Config+0x7c>)
 8001602:	2204      	movs	r2, #4
 8001604:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <GPIO_Config+0x7c>)
 8001608:	2200      	movs	r2, #0
 800160a:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <GPIO_Config+0x7c>)
 800160e:	2203      	movs	r2, #3
 8001610:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8001612:	4903      	ldr	r1, [pc, #12]	; (8001620 <GPIO_Config+0x7c>)
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <GPIO_Config+0x80>)
 8001616:	f7ff fde5 	bl	80011e4 <GPIO_Init>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000768 	.word	0x20000768
 8001624:	40020000 	.word	0x40020000

08001628 <ADC_Config>:

void ADC_Config(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

	ADC_CommonInitStruct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <ADC_Config+0x6c>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
	ADC_CommonInitStruct.ADC_Mode = ADC_Mode_Independent;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <ADC_Config+0x6c>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
	ADC_CommonInitStruct.ADC_Prescaler = ADC_Prescaler_Div4;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <ADC_Config+0x6c>)
 800163a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800163e:	605a      	str	r2, [r3, #4]
	ADC_CommonInit(&ADC_CommonInitStruct);
 8001640:	4814      	ldr	r0, [pc, #80]	; (8001694 <ADC_Config+0x6c>)
 8001642:	f7ff fb01 	bl	8000c48 <ADC_CommonInit>

	ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <ADC_Config+0x70>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	ADC_Init(ADC1,&ADC_InitStruct);
 800164c:	4912      	ldr	r1, [pc, #72]	; (8001698 <ADC_Config+0x70>)
 800164e:	4813      	ldr	r0, [pc, #76]	; (800169c <ADC_Config+0x74>)
 8001650:	f7ff faa4 	bl	8000b9c <ADC_Init>
	ADC_Cmd(ADC1,ENABLE);
 8001654:	2101      	movs	r1, #1
 8001656:	4811      	ldr	r0, [pc, #68]	; (800169c <ADC_Config+0x74>)
 8001658:	f7ff fb1e 	bl	8000c98 <ADC_Cmd>

	ADC_CommonInitStruct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <ADC_Config+0x6c>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
    ADC_CommonInitStruct.ADC_Mode = ADC_Mode_Independent;
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <ADC_Config+0x6c>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
	ADC_CommonInitStruct.ADC_Prescaler =ADC_Prescaler_Div4;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <ADC_Config+0x6c>)
 800166a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800166e:	605a      	str	r2, [r3, #4]
	ADC_CommonInit(&ADC_CommonInitStruct);
 8001670:	4808      	ldr	r0, [pc, #32]	; (8001694 <ADC_Config+0x6c>)
 8001672:	f7ff fae9 	bl	8000c48 <ADC_CommonInit>

	ADC_InitStruct.ADC_Resolution = ADC_Resolution_8b;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <ADC_Config+0x70>)
 8001678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800167c:	601a      	str	r2, [r3, #0]
	ADC_Init(ADC2,&ADC_InitStruct);
 800167e:	4906      	ldr	r1, [pc, #24]	; (8001698 <ADC_Config+0x70>)
 8001680:	4807      	ldr	r0, [pc, #28]	; (80016a0 <ADC_Config+0x78>)
 8001682:	f7ff fa8b 	bl	8000b9c <ADC_Init>
	ADC_Cmd(ADC2,ENABLE);
 8001686:	2101      	movs	r1, #1
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <ADC_Config+0x78>)
 800168a:	f7ff fb05 	bl	8000c98 <ADC_Cmd>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000a8 	.word	0x200000a8
 8001698:	2000074c 	.word	0x2000074c
 800169c:	40012000 	.word	0x40012000
 80016a0:	40012100 	.word	0x40012100

080016a4 <DAC2_Config>:

void DAC2_Config(void){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	DAC_InitStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <DAC2_Config+0x2c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
	DAC_InitStruct.DAC_Trigger = DAC_Trigger_None;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <DAC2_Config+0x2c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
	DAC_InitStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <DAC2_Config+0x2c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
	DAC_Init(DAC_Channel_2,&DAC_InitStruct);
 80016ba:	4905      	ldr	r1, [pc, #20]	; (80016d0 <DAC2_Config+0x2c>)
 80016bc:	2010      	movs	r0, #16
 80016be:	f7ff fc09 	bl	8000ed4 <DAC_Init>
	DAC_Cmd(DAC_Channel_2,ENABLE);
 80016c2:	2101      	movs	r1, #1
 80016c4:	2010      	movs	r0, #16
 80016c6:	f7ff fc39 	bl	8000f3c <DAC_Cmd>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000770 	.word	0x20000770

080016d4 <Read_ADC>:

uint32_t Read_ADC(void){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1,ADC_Channel_1,1,ADC_SampleTime_3Cycles);
 80016d8:	2300      	movs	r3, #0
 80016da:	2201      	movs	r2, #1
 80016dc:	2101      	movs	r1, #1
 80016de:	480a      	ldr	r0, [pc, #40]	; (8001708 <Read_ADC+0x34>)
 80016e0:	f7ff faf6 	bl	8000cd0 <ADC_RegularChannelConfig>
	ADC_SoftwareStartConv(ADC1);
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <Read_ADC+0x34>)
 80016e6:	f7ff fbbd 	bl	8000e64 <ADC_SoftwareStartConv>
		while(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC) == RESET);
 80016ea:	bf00      	nop
 80016ec:	2102      	movs	r1, #2
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <Read_ADC+0x34>)
 80016f0:	f7ff fbd5 	bl	8000e9e <ADC_GetFlagStatus>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f8      	beq.n	80016ec <Read_ADC+0x18>
		return ADC_GetConversionValue(ADC1);
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <Read_ADC+0x34>)
 80016fc:	f7ff fbc2 	bl	8000e84 <ADC_GetConversionValue>
 8001700:	4603      	mov	r3, r0

}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40012000 	.word	0x40012000

0800170c <Read_ADC2>:

uint32_t Read_ADC2(void){
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
		ADC_RegularChannelConfig(ADC2,ADC_Channel_2,1,ADC_SampleTime_3Cycles);
 8001710:	2300      	movs	r3, #0
 8001712:	2201      	movs	r2, #1
 8001714:	2102      	movs	r1, #2
 8001716:	480a      	ldr	r0, [pc, #40]	; (8001740 <Read_ADC2+0x34>)
 8001718:	f7ff fada 	bl	8000cd0 <ADC_RegularChannelConfig>
		ADC_SoftwareStartConv(ADC2);
 800171c:	4808      	ldr	r0, [pc, #32]	; (8001740 <Read_ADC2+0x34>)
 800171e:	f7ff fba1 	bl	8000e64 <ADC_SoftwareStartConv>

			while(ADC_GetFlagStatus(ADC2,ADC_FLAG_EOC) == RESET);
 8001722:	bf00      	nop
 8001724:	2102      	movs	r1, #2
 8001726:	4806      	ldr	r0, [pc, #24]	; (8001740 <Read_ADC2+0x34>)
 8001728:	f7ff fbb9 	bl	8000e9e <ADC_GetFlagStatus>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f8      	beq.n	8001724 <Read_ADC2+0x18>
			return ADC_GetConversionValue(ADC2);
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <Read_ADC2+0x34>)
 8001734:	f7ff fba6 	bl	8000e84 <ADC_GetConversionValue>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40012100 	.word	0x40012100
 8001744:	00000000 	.word	0x00000000

08001748 <main>:

int main(void)
{
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	RCC_Config();
 800174e:	f7ff ff11 	bl	8001574 <RCC_Config>
	GPIO_Config();
 8001752:	f7ff ff27 	bl	80015a4 <GPIO_Config>
	ADC_Config();
 8001756:	f7ff ff67 	bl	8001628 <ADC_Config>
	DAC2_Config();
 800175a:	f7ff ffa3 	bl	80016a4 <DAC2_Config>

  while (1)
  {
	  	adc_value= (Read_ADC()/1000);
 800175e:	f7ff ffb9 	bl	80016d4 <Read_ADC>
 8001762:	4602      	mov	r2, r0
 8001764:	4b46      	ldr	r3, [pc, #280]	; (8001880 <main+0x138>)
 8001766:	fba3 2302 	umull	r2, r3, r3, r2
 800176a:	099b      	lsrs	r3, r3, #6
 800176c:	4a45      	ldr	r2, [pc, #276]	; (8001884 <main+0x13c>)
 800176e:	6013      	str	r3, [r2, #0]
	  	adc2_value = Read_ADC2() * (3.0/255);
 8001770:	f7ff ffcc 	bl	800170c <Read_ADC2>
 8001774:	4603      	mov	r3, r0
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe68 	bl	800044c <__aeabi_ui2d>
 800177c:	a33c      	add	r3, pc, #240	; (adr r3, 8001870 <main+0x128>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7fe fed9 	bl	8000538 <__aeabi_dmul>
 8001786:	4603      	mov	r3, r0
 8001788:	460c      	mov	r4, r1
 800178a:	4618      	mov	r0, r3
 800178c:	4621      	mov	r1, r4
 800178e:	f7ff f9b5 	bl	8000afc <__aeabi_d2f>
 8001792:	4602      	mov	r2, r0
 8001794:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <main+0x140>)
 8001796:	601a      	str	r2, [r3, #0]
	  	PiktoPik = adc2_value/3.0;
 8001798:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <main+0x140>)
 800179a:	ed93 7a00 	vldr	s14, [r3]
 800179e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80017a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <main+0x144>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0;  i<420; i++){
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	e056      	b.n	8001860 <main+0x118>
			 sine_val[i]= (((PiktoPik*sin(i* adc_value*2*pi/420)) +1) *(4096/2) );
 80017b2:	4b36      	ldr	r3, [pc, #216]	; (800188c <main+0x144>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe6a 	bl	8000490 <__aeabi_f2d>
 80017bc:	4604      	mov	r4, r0
 80017be:	460d      	mov	r5, r1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a30      	ldr	r2, [pc, #192]	; (8001884 <main+0x13c>)
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe3d 	bl	800044c <__aeabi_ui2d>
 80017d2:	a329      	add	r3, pc, #164	; (adr r3, 8001878 <main+0x130>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7fe feae 	bl	8000538 <__aeabi_dmul>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b29      	ldr	r3, [pc, #164]	; (8001890 <main+0x148>)
 80017ea:	f7fe ffcf 	bl	800078c <__aeabi_ddiv>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	ec43 2b17 	vmov	d7, r2, r3
 80017f6:	eeb0 0a47 	vmov.f32	s0, s14
 80017fa:	eef0 0a67 	vmov.f32	s1, s15
 80017fe:	f000 f993 	bl	8001b28 <sin>
 8001802:	ec53 2b10 	vmov	r2, r3, d0
 8001806:	4620      	mov	r0, r4
 8001808:	4629      	mov	r1, r5
 800180a:	f7fe fe95 	bl	8000538 <__aeabi_dmul>
 800180e:	4603      	mov	r3, r0
 8001810:	460c      	mov	r4, r1
 8001812:	4618      	mov	r0, r3
 8001814:	4621      	mov	r1, r4
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <main+0x14c>)
 800181c:	f7fe fcda 	bl	80001d4 <__adddf3>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	4618      	mov	r0, r3
 8001826:	4621      	mov	r1, r4
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <main+0x150>)
 800182e:	f7fe fe83 	bl	8000538 <__aeabi_dmul>
 8001832:	4603      	mov	r3, r0
 8001834:	460c      	mov	r4, r1
 8001836:	4618      	mov	r0, r3
 8001838:	4621      	mov	r1, r4
 800183a:	f7ff f93f 	bl	8000abc <__aeabi_d2uiz>
 800183e:	4601      	mov	r1, r0
 8001840:	4a16      	ldr	r2, [pc, #88]	; (800189c <main+0x154>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 DAC_SetChannel2Data(DAC_Align_12b_R,sine_val[i]);
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <main+0x154>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4619      	mov	r1, r3
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff fbb3 	bl	8000fc0 <DAC_SetChannel2Data>
		for(int i=0;  i<420; i++){
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3301      	adds	r3, #1
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001866:	dba4      	blt.n	80017b2 <main+0x6a>
	  	adc_value= (Read_ADC()/1000);
 8001868:	e779      	b.n	800175e <main+0x16>
 800186a:	bf00      	nop
 800186c:	f3af 8000 	nop.w
 8001870:	18181818 	.word	0x18181818
 8001874:	3f881818 	.word	0x3f881818
 8001878:	4d12d84a 	.word	0x4d12d84a
 800187c:	400921fb 	.word	0x400921fb
 8001880:	10624dd3 	.word	0x10624dd3
 8001884:	20000748 	.word	0x20000748
 8001888:	20000780 	.word	0x20000780
 800188c:	20000764 	.word	0x20000764
 8001890:	407a4000 	.word	0x407a4000
 8001894:	3ff00000 	.word	0x3ff00000
 8001898:	40a00000 	.word	0x40a00000
 800189c:	200000b8 	.word	0x200000b8

080018a0 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80018aa:	bf00      	nop
}
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 80018ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001900 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ce:	e003      	b.n	80018d8 <LoopCopyDataInit>

080018d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018d6:	3104      	adds	r1, #4

080018d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018e0:	d3f6      	bcc.n	80018d0 <CopyDataInit>
  ldr  r2, =_sbss
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018e4:	e002      	b.n	80018ec <LoopFillZerobss>

080018e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018e8:	f842 3b04 	str.w	r3, [r2], #4

080018ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018f0:	d3f9      	bcc.n	80018e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018f2:	f000 f841 	bl	8001978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f6:	f000 f8f1 	bl	8001adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fa:	f7ff ff25 	bl	8001748 <main>
  bx  lr    
 80018fe:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001900:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001904:	08002da8 	.word	0x08002da8
  ldr  r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800190c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001910:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001914:	20000784 	.word	0x20000784

08001918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC_IRQHandler>

0800191a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800192c:	e7fe      	b.n	800192c <HardFault_Handler+0x4>

0800192e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001932:	e7fe      	b.n	8001932 <MemManage_Handler+0x4>

08001934 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001938:	e7fe      	b.n	8001938 <BusFault_Handler+0x4>

0800193a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800193e:	e7fe      	b.n	800193e <UsageFault_Handler+0x4>

08001940 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800197c:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <SystemInit+0x60>)
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <SystemInit+0x60>)
 8001980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800198c:	4a13      	ldr	r2, [pc, #76]	; (80019dc <SystemInit+0x64>)
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <SystemInit+0x64>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <SystemInit+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800199e:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <SystemInit+0x64>)
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <SystemInit+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <SystemInit+0x64>)
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <SystemInit+0x68>)
 80019b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019b4:	4a09      	ldr	r2, [pc, #36]	; (80019dc <SystemInit+0x64>)
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <SystemInit+0x64>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <SystemInit+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80019c6:	f000 f80d 	bl	80019e4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019ca:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <SystemInit+0x60>)
 80019cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d0:	609a      	str	r2, [r3, #8]
#endif
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00
 80019dc:	40023800 	.word	0x40023800
 80019e0:	24003010 	.word	0x24003010

080019e4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80019f2:	4a36      	ldr	r2, [pc, #216]	; (8001acc <SetSysClock+0xe8>)
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <SetSysClock+0xe8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80019fe:	4b33      	ldr	r3, [pc, #204]	; (8001acc <SetSysClock+0xe8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d103      	bne.n	8001a1c <SetSysClock+0x38>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a1a:	d1f0      	bne.n	80019fe <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <SetSysClock+0xe8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	e001      	b.n	8001a32 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d142      	bne.n	8001abe <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001a38:	4a24      	ldr	r2, [pc, #144]	; (8001acc <SetSysClock+0xe8>)
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <SetSysClock+0xe8>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a42:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001a44:	4a22      	ldr	r2, [pc, #136]	; (8001ad0 <SetSysClock+0xec>)
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <SetSysClock+0xec>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a4e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001a50:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <SetSysClock+0xe8>)
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <SetSysClock+0xe8>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001a58:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <SetSysClock+0xe8>)
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <SetSysClock+0xe8>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a62:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <SetSysClock+0xe8>)
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <SetSysClock+0xe8>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001a6e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <SetSysClock+0xe8>)
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <SetSysClock+0xf0>)
 8001a74:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <SetSysClock+0xe8>)
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <SetSysClock+0xe8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a80:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001a82:	bf00      	nop
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <SetSysClock+0xe8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f9      	beq.n	8001a84 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <SetSysClock+0xf4>)
 8001a92:	f240 6205 	movw	r2, #1541	; 0x605
 8001a96:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001a98:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <SetSysClock+0xe8>)
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <SetSysClock+0xe8>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001aa4:	4a09      	ldr	r2, [pc, #36]	; (8001acc <SetSysClock+0xe8>)
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <SetSysClock+0xe8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001ab0:	bf00      	nop
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SetSysClock+0xe8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d1f9      	bne.n	8001ab2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	07405408 	.word	0x07405408
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <__libc_init_array>:
 8001adc:	b570      	push	{r4, r5, r6, lr}
 8001ade:	4e0d      	ldr	r6, [pc, #52]	; (8001b14 <__libc_init_array+0x38>)
 8001ae0:	4c0d      	ldr	r4, [pc, #52]	; (8001b18 <__libc_init_array+0x3c>)
 8001ae2:	1ba4      	subs	r4, r4, r6
 8001ae4:	10a4      	asrs	r4, r4, #2
 8001ae6:	2500      	movs	r5, #0
 8001ae8:	42a5      	cmp	r5, r4
 8001aea:	d109      	bne.n	8001b00 <__libc_init_array+0x24>
 8001aec:	4e0b      	ldr	r6, [pc, #44]	; (8001b1c <__libc_init_array+0x40>)
 8001aee:	4c0c      	ldr	r4, [pc, #48]	; (8001b20 <__libc_init_array+0x44>)
 8001af0:	f001 f85e 	bl	8002bb0 <_init>
 8001af4:	1ba4      	subs	r4, r4, r6
 8001af6:	10a4      	asrs	r4, r4, #2
 8001af8:	2500      	movs	r5, #0
 8001afa:	42a5      	cmp	r5, r4
 8001afc:	d105      	bne.n	8001b0a <__libc_init_array+0x2e>
 8001afe:	bd70      	pop	{r4, r5, r6, pc}
 8001b00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b04:	4798      	blx	r3
 8001b06:	3501      	adds	r5, #1
 8001b08:	e7ee      	b.n	8001ae8 <__libc_init_array+0xc>
 8001b0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b0e:	4798      	blx	r3
 8001b10:	3501      	adds	r5, #1
 8001b12:	e7f2      	b.n	8001afa <__libc_init_array+0x1e>
 8001b14:	08002da0 	.word	0x08002da0
 8001b18:	08002da0 	.word	0x08002da0
 8001b1c:	08002da0 	.word	0x08002da0
 8001b20:	08002da4 	.word	0x08002da4
 8001b24:	00000000 	.word	0x00000000

08001b28 <sin>:
 8001b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001b2a:	ec51 0b10 	vmov	r0, r1, d0
 8001b2e:	4a20      	ldr	r2, [pc, #128]	; (8001bb0 <sin+0x88>)
 8001b30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001b34:	4293      	cmp	r3, r2
 8001b36:	dc07      	bgt.n	8001b48 <sin+0x20>
 8001b38:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8001ba8 <sin+0x80>
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f000 fe67 	bl	8002810 <__kernel_sin>
 8001b42:	ec51 0b10 	vmov	r0, r1, d0
 8001b46:	e007      	b.n	8001b58 <sin+0x30>
 8001b48:	4a1a      	ldr	r2, [pc, #104]	; (8001bb4 <sin+0x8c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	dd09      	ble.n	8001b62 <sin+0x3a>
 8001b4e:	ee10 2a10 	vmov	r2, s0
 8001b52:	460b      	mov	r3, r1
 8001b54:	f7fe fb3c 	bl	80001d0 <__aeabi_dsub>
 8001b58:	ec41 0b10 	vmov	d0, r0, r1
 8001b5c:	b005      	add	sp, #20
 8001b5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b62:	4668      	mov	r0, sp
 8001b64:	f000 f828 	bl	8001bb8 <__ieee754_rem_pio2>
 8001b68:	f000 0003 	and.w	r0, r0, #3
 8001b6c:	2801      	cmp	r0, #1
 8001b6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001b72:	ed9d 0b00 	vldr	d0, [sp]
 8001b76:	d004      	beq.n	8001b82 <sin+0x5a>
 8001b78:	2802      	cmp	r0, #2
 8001b7a:	d005      	beq.n	8001b88 <sin+0x60>
 8001b7c:	b970      	cbnz	r0, 8001b9c <sin+0x74>
 8001b7e:	2001      	movs	r0, #1
 8001b80:	e7dd      	b.n	8001b3e <sin+0x16>
 8001b82:	f000 fa0d 	bl	8001fa0 <__kernel_cos>
 8001b86:	e7dc      	b.n	8001b42 <sin+0x1a>
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f000 fe41 	bl	8002810 <__kernel_sin>
 8001b8e:	ec53 2b10 	vmov	r2, r3, d0
 8001b92:	ee10 0a10 	vmov	r0, s0
 8001b96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8001b9a:	e7dd      	b.n	8001b58 <sin+0x30>
 8001b9c:	f000 fa00 	bl	8001fa0 <__kernel_cos>
 8001ba0:	e7f5      	b.n	8001b8e <sin+0x66>
 8001ba2:	bf00      	nop
 8001ba4:	f3af 8000 	nop.w
	...
 8001bb0:	3fe921fb 	.word	0x3fe921fb
 8001bb4:	7fefffff 	.word	0x7fefffff

08001bb8 <__ieee754_rem_pio2>:
 8001bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bbc:	ec57 6b10 	vmov	r6, r7, d0
 8001bc0:	4bc3      	ldr	r3, [pc, #780]	; (8001ed0 <__ieee754_rem_pio2+0x318>)
 8001bc2:	b08d      	sub	sp, #52	; 0x34
 8001bc4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8001bc8:	4598      	cmp	r8, r3
 8001bca:	4604      	mov	r4, r0
 8001bcc:	9704      	str	r7, [sp, #16]
 8001bce:	dc07      	bgt.n	8001be0 <__ieee754_rem_pio2+0x28>
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	ed84 0b00 	vstr	d0, [r4]
 8001bd8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8001bdc:	2500      	movs	r5, #0
 8001bde:	e027      	b.n	8001c30 <__ieee754_rem_pio2+0x78>
 8001be0:	4bbc      	ldr	r3, [pc, #752]	; (8001ed4 <__ieee754_rem_pio2+0x31c>)
 8001be2:	4598      	cmp	r8, r3
 8001be4:	dc75      	bgt.n	8001cd2 <__ieee754_rem_pio2+0x11a>
 8001be6:	9b04      	ldr	r3, [sp, #16]
 8001be8:	4dbb      	ldr	r5, [pc, #748]	; (8001ed8 <__ieee754_rem_pio2+0x320>)
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	ee10 0a10 	vmov	r0, s0
 8001bf0:	a3a9      	add	r3, pc, #676	; (adr r3, 8001e98 <__ieee754_rem_pio2+0x2e0>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	4639      	mov	r1, r7
 8001bf8:	dd36      	ble.n	8001c68 <__ieee754_rem_pio2+0xb0>
 8001bfa:	f7fe fae9 	bl	80001d0 <__aeabi_dsub>
 8001bfe:	45a8      	cmp	r8, r5
 8001c00:	4606      	mov	r6, r0
 8001c02:	460f      	mov	r7, r1
 8001c04:	d018      	beq.n	8001c38 <__ieee754_rem_pio2+0x80>
 8001c06:	a3a6      	add	r3, pc, #664	; (adr r3, 8001ea0 <__ieee754_rem_pio2+0x2e8>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fae0 	bl	80001d0 <__aeabi_dsub>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	e9c4 2300 	strd	r2, r3, [r4]
 8001c18:	4630      	mov	r0, r6
 8001c1a:	4639      	mov	r1, r7
 8001c1c:	f7fe fad8 	bl	80001d0 <__aeabi_dsub>
 8001c20:	a39f      	add	r3, pc, #636	; (adr r3, 8001ea0 <__ieee754_rem_pio2+0x2e8>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fad3 	bl	80001d0 <__aeabi_dsub>
 8001c2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8001c2e:	2501      	movs	r5, #1
 8001c30:	4628      	mov	r0, r5
 8001c32:	b00d      	add	sp, #52	; 0x34
 8001c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c38:	a39b      	add	r3, pc, #620	; (adr r3, 8001ea8 <__ieee754_rem_pio2+0x2f0>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fac7 	bl	80001d0 <__aeabi_dsub>
 8001c42:	a39b      	add	r3, pc, #620	; (adr r3, 8001eb0 <__ieee754_rem_pio2+0x2f8>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	4606      	mov	r6, r0
 8001c4a:	460f      	mov	r7, r1
 8001c4c:	f7fe fac0 	bl	80001d0 <__aeabi_dsub>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	e9c4 2300 	strd	r2, r3, [r4]
 8001c58:	4630      	mov	r0, r6
 8001c5a:	4639      	mov	r1, r7
 8001c5c:	f7fe fab8 	bl	80001d0 <__aeabi_dsub>
 8001c60:	a393      	add	r3, pc, #588	; (adr r3, 8001eb0 <__ieee754_rem_pio2+0x2f8>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	e7de      	b.n	8001c26 <__ieee754_rem_pio2+0x6e>
 8001c68:	f7fe fab4 	bl	80001d4 <__adddf3>
 8001c6c:	45a8      	cmp	r8, r5
 8001c6e:	4606      	mov	r6, r0
 8001c70:	460f      	mov	r7, r1
 8001c72:	d016      	beq.n	8001ca2 <__ieee754_rem_pio2+0xea>
 8001c74:	a38a      	add	r3, pc, #552	; (adr r3, 8001ea0 <__ieee754_rem_pio2+0x2e8>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe faab 	bl	80001d4 <__adddf3>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	e9c4 2300 	strd	r2, r3, [r4]
 8001c86:	4630      	mov	r0, r6
 8001c88:	4639      	mov	r1, r7
 8001c8a:	f7fe faa1 	bl	80001d0 <__aeabi_dsub>
 8001c8e:	a384      	add	r3, pc, #528	; (adr r3, 8001ea0 <__ieee754_rem_pio2+0x2e8>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fa9e 	bl	80001d4 <__adddf3>
 8001c98:	f04f 35ff 	mov.w	r5, #4294967295
 8001c9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8001ca0:	e7c6      	b.n	8001c30 <__ieee754_rem_pio2+0x78>
 8001ca2:	a381      	add	r3, pc, #516	; (adr r3, 8001ea8 <__ieee754_rem_pio2+0x2f0>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fa94 	bl	80001d4 <__adddf3>
 8001cac:	a380      	add	r3, pc, #512	; (adr r3, 8001eb0 <__ieee754_rem_pio2+0x2f8>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	4606      	mov	r6, r0
 8001cb4:	460f      	mov	r7, r1
 8001cb6:	f7fe fa8d 	bl	80001d4 <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	e9c4 2300 	strd	r2, r3, [r4]
 8001cc2:	4630      	mov	r0, r6
 8001cc4:	4639      	mov	r1, r7
 8001cc6:	f7fe fa83 	bl	80001d0 <__aeabi_dsub>
 8001cca:	a379      	add	r3, pc, #484	; (adr r3, 8001eb0 <__ieee754_rem_pio2+0x2f8>)
 8001ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd0:	e7e0      	b.n	8001c94 <__ieee754_rem_pio2+0xdc>
 8001cd2:	4b82      	ldr	r3, [pc, #520]	; (8001edc <__ieee754_rem_pio2+0x324>)
 8001cd4:	4598      	cmp	r8, r3
 8001cd6:	f300 80d0 	bgt.w	8001e7a <__ieee754_rem_pio2+0x2c2>
 8001cda:	f000 fe53 	bl	8002984 <fabs>
 8001cde:	ec57 6b10 	vmov	r6, r7, d0
 8001ce2:	ee10 0a10 	vmov	r0, s0
 8001ce6:	a374      	add	r3, pc, #464	; (adr r3, 8001eb8 <__ieee754_rem_pio2+0x300>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	4639      	mov	r1, r7
 8001cee:	f7fe fc23 	bl	8000538 <__aeabi_dmul>
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4b7a      	ldr	r3, [pc, #488]	; (8001ee0 <__ieee754_rem_pio2+0x328>)
 8001cf6:	f7fe fa6d 	bl	80001d4 <__adddf3>
 8001cfa:	f7fe feb7 	bl	8000a6c <__aeabi_d2iz>
 8001cfe:	4605      	mov	r5, r0
 8001d00:	f7fe fbb4 	bl	800046c <__aeabi_i2d>
 8001d04:	a364      	add	r3, pc, #400	; (adr r3, 8001e98 <__ieee754_rem_pio2+0x2e0>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d0e:	f7fe fc13 	bl	8000538 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4630      	mov	r0, r6
 8001d18:	4639      	mov	r1, r7
 8001d1a:	f7fe fa59 	bl	80001d0 <__aeabi_dsub>
 8001d1e:	a360      	add	r3, pc, #384	; (adr r3, 8001ea0 <__ieee754_rem_pio2+0x2e8>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	4682      	mov	sl, r0
 8001d26:	468b      	mov	fp, r1
 8001d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001d2c:	f7fe fc04 	bl	8000538 <__aeabi_dmul>
 8001d30:	2d1f      	cmp	r5, #31
 8001d32:	4606      	mov	r6, r0
 8001d34:	460f      	mov	r7, r1
 8001d36:	dc2a      	bgt.n	8001d8e <__ieee754_rem_pio2+0x1d6>
 8001d38:	1e6a      	subs	r2, r5, #1
 8001d3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ee4 <__ieee754_rem_pio2+0x32c>)
 8001d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d40:	4598      	cmp	r8, r3
 8001d42:	d024      	beq.n	8001d8e <__ieee754_rem_pio2+0x1d6>
 8001d44:	4632      	mov	r2, r6
 8001d46:	463b      	mov	r3, r7
 8001d48:	4650      	mov	r0, sl
 8001d4a:	4659      	mov	r1, fp
 8001d4c:	f7fe fa40 	bl	80001d0 <__aeabi_dsub>
 8001d50:	e9c4 0100 	strd	r0, r1, [r4]
 8001d54:	e9d4 8900 	ldrd	r8, r9, [r4]
 8001d58:	4650      	mov	r0, sl
 8001d5a:	4642      	mov	r2, r8
 8001d5c:	464b      	mov	r3, r9
 8001d5e:	4659      	mov	r1, fp
 8001d60:	f7fe fa36 	bl	80001d0 <__aeabi_dsub>
 8001d64:	463b      	mov	r3, r7
 8001d66:	4632      	mov	r2, r6
 8001d68:	f7fe fa32 	bl	80001d0 <__aeabi_dsub>
 8001d6c:	9b04      	ldr	r3, [sp, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8001d74:	f6bf af5c 	bge.w	8001c30 <__ieee754_rem_pio2+0x78>
 8001d78:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8001d7c:	6063      	str	r3, [r4, #4]
 8001d7e:	f8c4 8000 	str.w	r8, [r4]
 8001d82:	60a0      	str	r0, [r4, #8]
 8001d84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001d88:	60e3      	str	r3, [r4, #12]
 8001d8a:	426d      	negs	r5, r5
 8001d8c:	e750      	b.n	8001c30 <__ieee754_rem_pio2+0x78>
 8001d8e:	4632      	mov	r2, r6
 8001d90:	463b      	mov	r3, r7
 8001d92:	4650      	mov	r0, sl
 8001d94:	4659      	mov	r1, fp
 8001d96:	f7fe fa1b 	bl	80001d0 <__aeabi_dsub>
 8001d9a:	ea4f 5228 	mov.w	r2, r8, asr #20
 8001d9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b10      	cmp	r3, #16
 8001da6:	e9c4 0100 	strd	r0, r1, [r4]
 8001daa:	9205      	str	r2, [sp, #20]
 8001dac:	ddd2      	ble.n	8001d54 <__ieee754_rem_pio2+0x19c>
 8001dae:	a33e      	add	r3, pc, #248	; (adr r3, 8001ea8 <__ieee754_rem_pio2+0x2f0>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001db8:	f7fe fbbe 	bl	8000538 <__aeabi_dmul>
 8001dbc:	4606      	mov	r6, r0
 8001dbe:	460f      	mov	r7, r1
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4650      	mov	r0, sl
 8001dc6:	4659      	mov	r1, fp
 8001dc8:	f7fe fa02 	bl	80001d0 <__aeabi_dsub>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4680      	mov	r8, r0
 8001dd2:	4689      	mov	r9, r1
 8001dd4:	4650      	mov	r0, sl
 8001dd6:	4659      	mov	r1, fp
 8001dd8:	f7fe f9fa 	bl	80001d0 <__aeabi_dsub>
 8001ddc:	4632      	mov	r2, r6
 8001dde:	463b      	mov	r3, r7
 8001de0:	f7fe f9f6 	bl	80001d0 <__aeabi_dsub>
 8001de4:	a332      	add	r3, pc, #200	; (adr r3, 8001eb0 <__ieee754_rem_pio2+0x2f8>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	4606      	mov	r6, r0
 8001dec:	460f      	mov	r7, r1
 8001dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001df2:	f7fe fba1 	bl	8000538 <__aeabi_dmul>
 8001df6:	4632      	mov	r2, r6
 8001df8:	463b      	mov	r3, r7
 8001dfa:	f7fe f9e9 	bl	80001d0 <__aeabi_dsub>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4606      	mov	r6, r0
 8001e04:	460f      	mov	r7, r1
 8001e06:	4640      	mov	r0, r8
 8001e08:	4649      	mov	r1, r9
 8001e0a:	f7fe f9e1 	bl	80001d0 <__aeabi_dsub>
 8001e0e:	9a05      	ldr	r2, [sp, #20]
 8001e10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b31      	cmp	r3, #49	; 0x31
 8001e18:	e9c4 0100 	strd	r0, r1, [r4]
 8001e1c:	dd2a      	ble.n	8001e74 <__ieee754_rem_pio2+0x2bc>
 8001e1e:	a328      	add	r3, pc, #160	; (adr r3, 8001ec0 <__ieee754_rem_pio2+0x308>)
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001e28:	f7fe fb86 	bl	8000538 <__aeabi_dmul>
 8001e2c:	4606      	mov	r6, r0
 8001e2e:	460f      	mov	r7, r1
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4640      	mov	r0, r8
 8001e36:	4649      	mov	r1, r9
 8001e38:	f7fe f9ca 	bl	80001d0 <__aeabi_dsub>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4682      	mov	sl, r0
 8001e42:	468b      	mov	fp, r1
 8001e44:	4640      	mov	r0, r8
 8001e46:	4649      	mov	r1, r9
 8001e48:	f7fe f9c2 	bl	80001d0 <__aeabi_dsub>
 8001e4c:	4632      	mov	r2, r6
 8001e4e:	463b      	mov	r3, r7
 8001e50:	f7fe f9be 	bl	80001d0 <__aeabi_dsub>
 8001e54:	a31c      	add	r3, pc, #112	; (adr r3, 8001ec8 <__ieee754_rem_pio2+0x310>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	4606      	mov	r6, r0
 8001e5c:	460f      	mov	r7, r1
 8001e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001e62:	f7fe fb69 	bl	8000538 <__aeabi_dmul>
 8001e66:	4632      	mov	r2, r6
 8001e68:	463b      	mov	r3, r7
 8001e6a:	f7fe f9b1 	bl	80001d0 <__aeabi_dsub>
 8001e6e:	4606      	mov	r6, r0
 8001e70:	460f      	mov	r7, r1
 8001e72:	e767      	b.n	8001d44 <__ieee754_rem_pio2+0x18c>
 8001e74:	46c2      	mov	sl, r8
 8001e76:	46cb      	mov	fp, r9
 8001e78:	e76c      	b.n	8001d54 <__ieee754_rem_pio2+0x19c>
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <__ieee754_rem_pio2+0x330>)
 8001e7c:	4598      	cmp	r8, r3
 8001e7e:	dd35      	ble.n	8001eec <__ieee754_rem_pio2+0x334>
 8001e80:	ee10 2a10 	vmov	r2, s0
 8001e84:	463b      	mov	r3, r7
 8001e86:	4630      	mov	r0, r6
 8001e88:	4639      	mov	r1, r7
 8001e8a:	f7fe f9a1 	bl	80001d0 <__aeabi_dsub>
 8001e8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8001e92:	e9c4 0100 	strd	r0, r1, [r4]
 8001e96:	e6a1      	b.n	8001bdc <__ieee754_rem_pio2+0x24>
 8001e98:	54400000 	.word	0x54400000
 8001e9c:	3ff921fb 	.word	0x3ff921fb
 8001ea0:	1a626331 	.word	0x1a626331
 8001ea4:	3dd0b461 	.word	0x3dd0b461
 8001ea8:	1a600000 	.word	0x1a600000
 8001eac:	3dd0b461 	.word	0x3dd0b461
 8001eb0:	2e037073 	.word	0x2e037073
 8001eb4:	3ba3198a 	.word	0x3ba3198a
 8001eb8:	6dc9c883 	.word	0x6dc9c883
 8001ebc:	3fe45f30 	.word	0x3fe45f30
 8001ec0:	2e000000 	.word	0x2e000000
 8001ec4:	3ba3198a 	.word	0x3ba3198a
 8001ec8:	252049c1 	.word	0x252049c1
 8001ecc:	397b839a 	.word	0x397b839a
 8001ed0:	3fe921fb 	.word	0x3fe921fb
 8001ed4:	4002d97b 	.word	0x4002d97b
 8001ed8:	3ff921fb 	.word	0x3ff921fb
 8001edc:	413921fb 	.word	0x413921fb
 8001ee0:	3fe00000 	.word	0x3fe00000
 8001ee4:	08002bc8 	.word	0x08002bc8
 8001ee8:	7fefffff 	.word	0x7fefffff
 8001eec:	ea4f 5528 	mov.w	r5, r8, asr #20
 8001ef0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8001ef4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8001ef8:	4630      	mov	r0, r6
 8001efa:	460f      	mov	r7, r1
 8001efc:	f7fe fdb6 	bl	8000a6c <__aeabi_d2iz>
 8001f00:	f7fe fab4 	bl	800046c <__aeabi_i2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4630      	mov	r0, r6
 8001f0a:	4639      	mov	r1, r7
 8001f0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001f10:	f7fe f95e 	bl	80001d0 <__aeabi_dsub>
 8001f14:	2200      	movs	r2, #0
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <__ieee754_rem_pio2+0x3dc>)
 8001f18:	f7fe fb0e 	bl	8000538 <__aeabi_dmul>
 8001f1c:	460f      	mov	r7, r1
 8001f1e:	4606      	mov	r6, r0
 8001f20:	f7fe fda4 	bl	8000a6c <__aeabi_d2iz>
 8001f24:	f7fe faa2 	bl	800046c <__aeabi_i2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4630      	mov	r0, r6
 8001f2e:	4639      	mov	r1, r7
 8001f30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001f34:	f7fe f94c 	bl	80001d0 <__aeabi_dsub>
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <__ieee754_rem_pio2+0x3dc>)
 8001f3c:	f7fe fafc 	bl	8000538 <__aeabi_dmul>
 8001f40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001f44:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8001f48:	f04f 0803 	mov.w	r8, #3
 8001f4c:	2600      	movs	r6, #0
 8001f4e:	2700      	movs	r7, #0
 8001f50:	4632      	mov	r2, r6
 8001f52:	463b      	mov	r3, r7
 8001f54:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8001f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8001f5c:	f7fe fd54 	bl	8000a08 <__aeabi_dcmpeq>
 8001f60:	b9b0      	cbnz	r0, 8001f90 <__ieee754_rem_pio2+0x3d8>
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <__ieee754_rem_pio2+0x3e0>)
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	2302      	movs	r3, #2
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	462a      	mov	r2, r5
 8001f6c:	4643      	mov	r3, r8
 8001f6e:	4621      	mov	r1, r4
 8001f70:	a806      	add	r0, sp, #24
 8001f72:	f000 f8fd 	bl	8002170 <__kernel_rem_pio2>
 8001f76:	9b04      	ldr	r3, [sp, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	4605      	mov	r5, r0
 8001f7c:	f6bf ae58 	bge.w	8001c30 <__ieee754_rem_pio2+0x78>
 8001f80:	6863      	ldr	r3, [r4, #4]
 8001f82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001f86:	6063      	str	r3, [r4, #4]
 8001f88:	68e3      	ldr	r3, [r4, #12]
 8001f8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001f8e:	e6fb      	b.n	8001d88 <__ieee754_rem_pio2+0x1d0>
 8001f90:	46d0      	mov	r8, sl
 8001f92:	e7dd      	b.n	8001f50 <__ieee754_rem_pio2+0x398>
 8001f94:	41700000 	.word	0x41700000
 8001f98:	08002c48 	.word	0x08002c48
 8001f9c:	00000000 	.word	0x00000000

08001fa0 <__kernel_cos>:
 8001fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa4:	ec59 8b10 	vmov	r8, r9, d0
 8001fa8:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8001fac:	b085      	sub	sp, #20
 8001fae:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8001fb2:	ed8d 1b00 	vstr	d1, [sp]
 8001fb6:	da07      	bge.n	8001fc8 <__kernel_cos+0x28>
 8001fb8:	ee10 0a10 	vmov	r0, s0
 8001fbc:	4649      	mov	r1, r9
 8001fbe:	f7fe fd55 	bl	8000a6c <__aeabi_d2iz>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	f000 80aa 	beq.w	800211c <__kernel_cos+0x17c>
 8001fc8:	4642      	mov	r2, r8
 8001fca:	464b      	mov	r3, r9
 8001fcc:	4640      	mov	r0, r8
 8001fce:	4649      	mov	r1, r9
 8001fd0:	f7fe fab2 	bl	8000538 <__aeabi_dmul>
 8001fd4:	a359      	add	r3, pc, #356	; (adr r3, 800213c <__kernel_cos+0x19c>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	4604      	mov	r4, r0
 8001fdc:	460d      	mov	r5, r1
 8001fde:	f7fe faab 	bl	8000538 <__aeabi_dmul>
 8001fe2:	a358      	add	r3, pc, #352	; (adr r3, 8002144 <__kernel_cos+0x1a4>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe f8f4 	bl	80001d4 <__adddf3>
 8001fec:	4622      	mov	r2, r4
 8001fee:	462b      	mov	r3, r5
 8001ff0:	f7fe faa2 	bl	8000538 <__aeabi_dmul>
 8001ff4:	a355      	add	r3, pc, #340	; (adr r3, 800214c <__kernel_cos+0x1ac>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe f8e9 	bl	80001d0 <__aeabi_dsub>
 8001ffe:	4622      	mov	r2, r4
 8002000:	462b      	mov	r3, r5
 8002002:	f7fe fa99 	bl	8000538 <__aeabi_dmul>
 8002006:	a353      	add	r3, pc, #332	; (adr r3, 8002154 <__kernel_cos+0x1b4>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	f7fe f8e2 	bl	80001d4 <__adddf3>
 8002010:	4622      	mov	r2, r4
 8002012:	462b      	mov	r3, r5
 8002014:	f7fe fa90 	bl	8000538 <__aeabi_dmul>
 8002018:	a350      	add	r3, pc, #320	; (adr r3, 800215c <__kernel_cos+0x1bc>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe f8d7 	bl	80001d0 <__aeabi_dsub>
 8002022:	4622      	mov	r2, r4
 8002024:	462b      	mov	r3, r5
 8002026:	f7fe fa87 	bl	8000538 <__aeabi_dmul>
 800202a:	a34e      	add	r3, pc, #312	; (adr r3, 8002164 <__kernel_cos+0x1c4>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe f8d0 	bl	80001d4 <__adddf3>
 8002034:	462b      	mov	r3, r5
 8002036:	4622      	mov	r2, r4
 8002038:	f7fe fa7e 	bl	8000538 <__aeabi_dmul>
 800203c:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <__kernel_cos+0x188>)
 800203e:	429f      	cmp	r7, r3
 8002040:	4682      	mov	sl, r0
 8002042:	468b      	mov	fp, r1
 8002044:	dc2c      	bgt.n	80020a0 <__kernel_cos+0x100>
 8002046:	2200      	movs	r2, #0
 8002048:	4b38      	ldr	r3, [pc, #224]	; (800212c <__kernel_cos+0x18c>)
 800204a:	4620      	mov	r0, r4
 800204c:	4629      	mov	r1, r5
 800204e:	f7fe fa73 	bl	8000538 <__aeabi_dmul>
 8002052:	4652      	mov	r2, sl
 8002054:	4606      	mov	r6, r0
 8002056:	460f      	mov	r7, r1
 8002058:	465b      	mov	r3, fp
 800205a:	4620      	mov	r0, r4
 800205c:	4629      	mov	r1, r5
 800205e:	f7fe fa6b 	bl	8000538 <__aeabi_dmul>
 8002062:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002066:	4604      	mov	r4, r0
 8002068:	460d      	mov	r5, r1
 800206a:	4640      	mov	r0, r8
 800206c:	4649      	mov	r1, r9
 800206e:	f7fe fa63 	bl	8000538 <__aeabi_dmul>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4620      	mov	r0, r4
 8002078:	4629      	mov	r1, r5
 800207a:	f7fe f8a9 	bl	80001d0 <__aeabi_dsub>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4630      	mov	r0, r6
 8002084:	4639      	mov	r1, r7
 8002086:	f7fe f8a3 	bl	80001d0 <__aeabi_dsub>
 800208a:	460b      	mov	r3, r1
 800208c:	4928      	ldr	r1, [pc, #160]	; (8002130 <__kernel_cos+0x190>)
 800208e:	4602      	mov	r2, r0
 8002090:	2000      	movs	r0, #0
 8002092:	f7fe f89d 	bl	80001d0 <__aeabi_dsub>
 8002096:	ec41 0b10 	vmov	d0, r0, r1
 800209a:	b005      	add	sp, #20
 800209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <__kernel_cos+0x194>)
 80020a2:	4923      	ldr	r1, [pc, #140]	; (8002130 <__kernel_cos+0x190>)
 80020a4:	429f      	cmp	r7, r3
 80020a6:	bfd7      	itett	le
 80020a8:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80020ac:	4f22      	ldrgt	r7, [pc, #136]	; (8002138 <__kernel_cos+0x198>)
 80020ae:	2200      	movle	r2, #0
 80020b0:	4616      	movle	r6, r2
 80020b2:	bfd4      	ite	le
 80020b4:	461f      	movle	r7, r3
 80020b6:	2600      	movgt	r6, #0
 80020b8:	4632      	mov	r2, r6
 80020ba:	463b      	mov	r3, r7
 80020bc:	2000      	movs	r0, #0
 80020be:	f7fe f887 	bl	80001d0 <__aeabi_dsub>
 80020c2:	2200      	movs	r2, #0
 80020c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <__kernel_cos+0x18c>)
 80020ca:	4620      	mov	r0, r4
 80020cc:	4629      	mov	r1, r5
 80020ce:	f7fe fa33 	bl	8000538 <__aeabi_dmul>
 80020d2:	4632      	mov	r2, r6
 80020d4:	463b      	mov	r3, r7
 80020d6:	f7fe f87b 	bl	80001d0 <__aeabi_dsub>
 80020da:	4652      	mov	r2, sl
 80020dc:	4606      	mov	r6, r0
 80020de:	460f      	mov	r7, r1
 80020e0:	465b      	mov	r3, fp
 80020e2:	4620      	mov	r0, r4
 80020e4:	4629      	mov	r1, r5
 80020e6:	f7fe fa27 	bl	8000538 <__aeabi_dmul>
 80020ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80020ee:	4604      	mov	r4, r0
 80020f0:	460d      	mov	r5, r1
 80020f2:	4640      	mov	r0, r8
 80020f4:	4649      	mov	r1, r9
 80020f6:	f7fe fa1f 	bl	8000538 <__aeabi_dmul>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4620      	mov	r0, r4
 8002100:	4629      	mov	r1, r5
 8002102:	f7fe f865 	bl	80001d0 <__aeabi_dsub>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4630      	mov	r0, r6
 800210c:	4639      	mov	r1, r7
 800210e:	f7fe f85f 	bl	80001d0 <__aeabi_dsub>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800211a:	e7ba      	b.n	8002092 <__kernel_cos+0xf2>
 800211c:	2000      	movs	r0, #0
 800211e:	4904      	ldr	r1, [pc, #16]	; (8002130 <__kernel_cos+0x190>)
 8002120:	e7b9      	b.n	8002096 <__kernel_cos+0xf6>
 8002122:	bf00      	nop
 8002124:	f3af 8000 	nop.w
 8002128:	3fd33332 	.word	0x3fd33332
 800212c:	3fe00000 	.word	0x3fe00000
 8002130:	3ff00000 	.word	0x3ff00000
 8002134:	3fe90000 	.word	0x3fe90000
 8002138:	3fd20000 	.word	0x3fd20000
 800213c:	be8838d4 	.word	0xbe8838d4
 8002140:	bda8fae9 	.word	0xbda8fae9
 8002144:	bdb4b1c4 	.word	0xbdb4b1c4
 8002148:	3e21ee9e 	.word	0x3e21ee9e
 800214c:	809c52ad 	.word	0x809c52ad
 8002150:	3e927e4f 	.word	0x3e927e4f
 8002154:	19cb1590 	.word	0x19cb1590
 8002158:	3efa01a0 	.word	0x3efa01a0
 800215c:	16c15177 	.word	0x16c15177
 8002160:	3f56c16c 	.word	0x3f56c16c
 8002164:	5555554c 	.word	0x5555554c
 8002168:	3fa55555 	.word	0x3fa55555
 800216c:	00000000 	.word	0x00000000

08002170 <__kernel_rem_pio2>:
 8002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002174:	ed2d 8b02 	vpush	{d8}
 8002178:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800217c:	1ed4      	subs	r4, r2, #3
 800217e:	9306      	str	r3, [sp, #24]
 8002180:	9102      	str	r1, [sp, #8]
 8002182:	4bc3      	ldr	r3, [pc, #780]	; (8002490 <__kernel_rem_pio2+0x320>)
 8002184:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8002186:	9009      	str	r0, [sp, #36]	; 0x24
 8002188:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	9b06      	ldr	r3, [sp, #24]
 8002190:	3b01      	subs	r3, #1
 8002192:	9304      	str	r3, [sp, #16]
 8002194:	2318      	movs	r3, #24
 8002196:	fb94 f4f3 	sdiv	r4, r4, r3
 800219a:	f06f 0317 	mvn.w	r3, #23
 800219e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80021a2:	fb04 3303 	mla	r3, r4, r3, r3
 80021a6:	eb03 0a02 	add.w	sl, r3, r2
 80021aa:	9b00      	ldr	r3, [sp, #0]
 80021ac:	9a04      	ldr	r2, [sp, #16]
 80021ae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8002480 <__kernel_rem_pio2+0x310>
 80021b2:	eb03 0802 	add.w	r8, r3, r2
 80021b6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80021b8:	1aa7      	subs	r7, r4, r2
 80021ba:	ae20      	add	r6, sp, #128	; 0x80
 80021bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80021c0:	2500      	movs	r5, #0
 80021c2:	4545      	cmp	r5, r8
 80021c4:	dd13      	ble.n	80021ee <__kernel_rem_pio2+0x7e>
 80021c6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8002480 <__kernel_rem_pio2+0x310>
 80021ca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80021ce:	2600      	movs	r6, #0
 80021d0:	9b00      	ldr	r3, [sp, #0]
 80021d2:	429e      	cmp	r6, r3
 80021d4:	dc32      	bgt.n	800223c <__kernel_rem_pio2+0xcc>
 80021d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021d8:	9303      	str	r3, [sp, #12]
 80021da:	9b06      	ldr	r3, [sp, #24]
 80021dc:	199d      	adds	r5, r3, r6
 80021de:	ab20      	add	r3, sp, #128	; 0x80
 80021e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80021e4:	9308      	str	r3, [sp, #32]
 80021e6:	ec59 8b18 	vmov	r8, r9, d8
 80021ea:	2700      	movs	r7, #0
 80021ec:	e01f      	b.n	800222e <__kernel_rem_pio2+0xbe>
 80021ee:	42ef      	cmn	r7, r5
 80021f0:	d407      	bmi.n	8002202 <__kernel_rem_pio2+0x92>
 80021f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80021f6:	f7fe f939 	bl	800046c <__aeabi_i2d>
 80021fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80021fe:	3501      	adds	r5, #1
 8002200:	e7df      	b.n	80021c2 <__kernel_rem_pio2+0x52>
 8002202:	ec51 0b18 	vmov	r0, r1, d8
 8002206:	e7f8      	b.n	80021fa <__kernel_rem_pio2+0x8a>
 8002208:	9908      	ldr	r1, [sp, #32]
 800220a:	9d03      	ldr	r5, [sp, #12]
 800220c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002210:	9108      	str	r1, [sp, #32]
 8002212:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8002216:	9503      	str	r5, [sp, #12]
 8002218:	f7fe f98e 	bl	8000538 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4640      	mov	r0, r8
 8002222:	4649      	mov	r1, r9
 8002224:	f7fd ffd6 	bl	80001d4 <__adddf3>
 8002228:	3701      	adds	r7, #1
 800222a:	4680      	mov	r8, r0
 800222c:	4689      	mov	r9, r1
 800222e:	9b04      	ldr	r3, [sp, #16]
 8002230:	429f      	cmp	r7, r3
 8002232:	dde9      	ble.n	8002208 <__kernel_rem_pio2+0x98>
 8002234:	e8eb 8902 	strd	r8, r9, [fp], #8
 8002238:	3601      	adds	r6, #1
 800223a:	e7c9      	b.n	80021d0 <__kernel_rem_pio2+0x60>
 800223c:	9b00      	ldr	r3, [sp, #0]
 800223e:	9f00      	ldr	r7, [sp, #0]
 8002240:	aa0c      	add	r2, sp, #48	; 0x30
 8002242:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002246:	930b      	str	r3, [sp, #44]	; 0x2c
 8002248:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800224a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800224e:	930a      	str	r3, [sp, #40]	; 0x28
 8002250:	ab98      	add	r3, sp, #608	; 0x260
 8002252:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8002256:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800225a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800225e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8002262:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002266:	9308      	str	r3, [sp, #32]
 8002268:	9a08      	ldr	r2, [sp, #32]
 800226a:	ab98      	add	r3, sp, #608	; 0x260
 800226c:	4413      	add	r3, r2
 800226e:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8002272:	2600      	movs	r6, #0
 8002274:	1bbb      	subs	r3, r7, r6
 8002276:	2b00      	cmp	r3, #0
 8002278:	dc77      	bgt.n	800236a <__kernel_rem_pio2+0x1fa>
 800227a:	ec49 8b10 	vmov	d0, r8, r9
 800227e:	4650      	mov	r0, sl
 8002280:	f000 fc0e 	bl	8002aa0 <scalbn>
 8002284:	ec55 4b10 	vmov	r4, r5, d0
 8002288:	2200      	movs	r2, #0
 800228a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800228e:	ee10 0a10 	vmov	r0, s0
 8002292:	4629      	mov	r1, r5
 8002294:	f7fe f950 	bl	8000538 <__aeabi_dmul>
 8002298:	ec41 0b10 	vmov	d0, r0, r1
 800229c:	f000 fb7c 	bl	8002998 <floor>
 80022a0:	2200      	movs	r2, #0
 80022a2:	ec51 0b10 	vmov	r0, r1, d0
 80022a6:	4b7b      	ldr	r3, [pc, #492]	; (8002494 <__kernel_rem_pio2+0x324>)
 80022a8:	f7fe f946 	bl	8000538 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fd ff8c 	bl	80001d0 <__aeabi_dsub>
 80022b8:	460d      	mov	r5, r1
 80022ba:	4604      	mov	r4, r0
 80022bc:	f7fe fbd6 	bl	8000a6c <__aeabi_d2iz>
 80022c0:	9003      	str	r0, [sp, #12]
 80022c2:	f7fe f8d3 	bl	800046c <__aeabi_i2d>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4620      	mov	r0, r4
 80022cc:	4629      	mov	r1, r5
 80022ce:	f7fd ff7f 	bl	80001d0 <__aeabi_dsub>
 80022d2:	f1ba 0f00 	cmp.w	sl, #0
 80022d6:	4680      	mov	r8, r0
 80022d8:	4689      	mov	r9, r1
 80022da:	dd6b      	ble.n	80023b4 <__kernel_rem_pio2+0x244>
 80022dc:	1e7a      	subs	r2, r7, #1
 80022de:	ab0c      	add	r3, sp, #48	; 0x30
 80022e0:	f1ca 0118 	rsb	r1, sl, #24
 80022e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80022e8:	9c03      	ldr	r4, [sp, #12]
 80022ea:	fa40 f301 	asr.w	r3, r0, r1
 80022ee:	441c      	add	r4, r3
 80022f0:	408b      	lsls	r3, r1
 80022f2:	1ac0      	subs	r0, r0, r3
 80022f4:	ab0c      	add	r3, sp, #48	; 0x30
 80022f6:	9403      	str	r4, [sp, #12]
 80022f8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80022fc:	f1ca 0317 	rsb	r3, sl, #23
 8002300:	fa40 fb03 	asr.w	fp, r0, r3
 8002304:	f1bb 0f00 	cmp.w	fp, #0
 8002308:	dd62      	ble.n	80023d0 <__kernel_rem_pio2+0x260>
 800230a:	9b03      	ldr	r3, [sp, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	3301      	adds	r3, #1
 8002310:	9303      	str	r3, [sp, #12]
 8002312:	4614      	mov	r4, r2
 8002314:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002318:	4297      	cmp	r7, r2
 800231a:	f300 8089 	bgt.w	8002430 <__kernel_rem_pio2+0x2c0>
 800231e:	f1ba 0f00 	cmp.w	sl, #0
 8002322:	dd07      	ble.n	8002334 <__kernel_rem_pio2+0x1c4>
 8002324:	f1ba 0f01 	cmp.w	sl, #1
 8002328:	f000 8096 	beq.w	8002458 <__kernel_rem_pio2+0x2e8>
 800232c:	f1ba 0f02 	cmp.w	sl, #2
 8002330:	f000 809c 	beq.w	800246c <__kernel_rem_pio2+0x2fc>
 8002334:	f1bb 0f02 	cmp.w	fp, #2
 8002338:	d14a      	bne.n	80023d0 <__kernel_rem_pio2+0x260>
 800233a:	4642      	mov	r2, r8
 800233c:	464b      	mov	r3, r9
 800233e:	2000      	movs	r0, #0
 8002340:	4955      	ldr	r1, [pc, #340]	; (8002498 <__kernel_rem_pio2+0x328>)
 8002342:	f7fd ff45 	bl	80001d0 <__aeabi_dsub>
 8002346:	4680      	mov	r8, r0
 8002348:	4689      	mov	r9, r1
 800234a:	2c00      	cmp	r4, #0
 800234c:	d040      	beq.n	80023d0 <__kernel_rem_pio2+0x260>
 800234e:	4650      	mov	r0, sl
 8002350:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8002488 <__kernel_rem_pio2+0x318>
 8002354:	f000 fba4 	bl	8002aa0 <scalbn>
 8002358:	4640      	mov	r0, r8
 800235a:	4649      	mov	r1, r9
 800235c:	ec53 2b10 	vmov	r2, r3, d0
 8002360:	f7fd ff36 	bl	80001d0 <__aeabi_dsub>
 8002364:	4680      	mov	r8, r0
 8002366:	4689      	mov	r9, r1
 8002368:	e032      	b.n	80023d0 <__kernel_rem_pio2+0x260>
 800236a:	2200      	movs	r2, #0
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <__kernel_rem_pio2+0x32c>)
 800236e:	4640      	mov	r0, r8
 8002370:	4649      	mov	r1, r9
 8002372:	f7fe f8e1 	bl	8000538 <__aeabi_dmul>
 8002376:	f7fe fb79 	bl	8000a6c <__aeabi_d2iz>
 800237a:	f7fe f877 	bl	800046c <__aeabi_i2d>
 800237e:	2200      	movs	r2, #0
 8002380:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <__kernel_rem_pio2+0x330>)
 8002382:	4604      	mov	r4, r0
 8002384:	460d      	mov	r5, r1
 8002386:	f7fe f8d7 	bl	8000538 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4640      	mov	r0, r8
 8002390:	4649      	mov	r1, r9
 8002392:	f7fd ff1d 	bl	80001d0 <__aeabi_dsub>
 8002396:	f7fe fb69 	bl	8000a6c <__aeabi_d2iz>
 800239a:	ab0c      	add	r3, sp, #48	; 0x30
 800239c:	4629      	mov	r1, r5
 800239e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80023a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80023a6:	4620      	mov	r0, r4
 80023a8:	f7fd ff14 	bl	80001d4 <__adddf3>
 80023ac:	3601      	adds	r6, #1
 80023ae:	4680      	mov	r8, r0
 80023b0:	4689      	mov	r9, r1
 80023b2:	e75f      	b.n	8002274 <__kernel_rem_pio2+0x104>
 80023b4:	d106      	bne.n	80023c4 <__kernel_rem_pio2+0x254>
 80023b6:	1e7b      	subs	r3, r7, #1
 80023b8:	aa0c      	add	r2, sp, #48	; 0x30
 80023ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023be:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80023c2:	e79f      	b.n	8002304 <__kernel_rem_pio2+0x194>
 80023c4:	2200      	movs	r2, #0
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <__kernel_rem_pio2+0x334>)
 80023c8:	f7fe fb3c 	bl	8000a44 <__aeabi_dcmpge>
 80023cc:	bb68      	cbnz	r0, 800242a <__kernel_rem_pio2+0x2ba>
 80023ce:	4683      	mov	fp, r0
 80023d0:	2200      	movs	r2, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	4640      	mov	r0, r8
 80023d6:	4649      	mov	r1, r9
 80023d8:	f7fe fb16 	bl	8000a08 <__aeabi_dcmpeq>
 80023dc:	2800      	cmp	r0, #0
 80023de:	f000 80c1 	beq.w	8002564 <__kernel_rem_pio2+0x3f4>
 80023e2:	1e7c      	subs	r4, r7, #1
 80023e4:	4623      	mov	r3, r4
 80023e6:	2200      	movs	r2, #0
 80023e8:	9900      	ldr	r1, [sp, #0]
 80023ea:	428b      	cmp	r3, r1
 80023ec:	da5c      	bge.n	80024a8 <__kernel_rem_pio2+0x338>
 80023ee:	2a00      	cmp	r2, #0
 80023f0:	f040 808b 	bne.w	800250a <__kernel_rem_pio2+0x39a>
 80023f4:	2401      	movs	r4, #1
 80023f6:	f06f 0203 	mvn.w	r2, #3
 80023fa:	fb02 f304 	mul.w	r3, r2, r4
 80023fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002400:	58cb      	ldr	r3, [r1, r3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d056      	beq.n	80024b4 <__kernel_rem_pio2+0x344>
 8002406:	9b08      	ldr	r3, [sp, #32]
 8002408:	aa98      	add	r2, sp, #608	; 0x260
 800240a:	4413      	add	r3, r2
 800240c:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8002410:	9b06      	ldr	r3, [sp, #24]
 8002412:	19dd      	adds	r5, r3, r7
 8002414:	ab20      	add	r3, sp, #128	; 0x80
 8002416:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800241a:	19e3      	adds	r3, r4, r7
 800241c:	1c7e      	adds	r6, r7, #1
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	9b03      	ldr	r3, [sp, #12]
 8002422:	429e      	cmp	r6, r3
 8002424:	dd48      	ble.n	80024b8 <__kernel_rem_pio2+0x348>
 8002426:	461f      	mov	r7, r3
 8002428:	e712      	b.n	8002250 <__kernel_rem_pio2+0xe0>
 800242a:	f04f 0b02 	mov.w	fp, #2
 800242e:	e76c      	b.n	800230a <__kernel_rem_pio2+0x19a>
 8002430:	ab0c      	add	r3, sp, #48	; 0x30
 8002432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002436:	b94c      	cbnz	r4, 800244c <__kernel_rem_pio2+0x2dc>
 8002438:	b12b      	cbz	r3, 8002446 <__kernel_rem_pio2+0x2d6>
 800243a:	a80c      	add	r0, sp, #48	; 0x30
 800243c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002440:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002444:	2301      	movs	r3, #1
 8002446:	3201      	adds	r2, #1
 8002448:	461c      	mov	r4, r3
 800244a:	e765      	b.n	8002318 <__kernel_rem_pio2+0x1a8>
 800244c:	a80c      	add	r0, sp, #48	; 0x30
 800244e:	1acb      	subs	r3, r1, r3
 8002450:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002454:	4623      	mov	r3, r4
 8002456:	e7f6      	b.n	8002446 <__kernel_rem_pio2+0x2d6>
 8002458:	1e7a      	subs	r2, r7, #1
 800245a:	ab0c      	add	r3, sp, #48	; 0x30
 800245c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002460:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002464:	a90c      	add	r1, sp, #48	; 0x30
 8002466:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800246a:	e763      	b.n	8002334 <__kernel_rem_pio2+0x1c4>
 800246c:	1e7a      	subs	r2, r7, #1
 800246e:	ab0c      	add	r3, sp, #48	; 0x30
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002478:	e7f4      	b.n	8002464 <__kernel_rem_pio2+0x2f4>
 800247a:	bf00      	nop
 800247c:	f3af 8000 	nop.w
	...
 800248c:	3ff00000 	.word	0x3ff00000
 8002490:	08002d90 	.word	0x08002d90
 8002494:	40200000 	.word	0x40200000
 8002498:	3ff00000 	.word	0x3ff00000
 800249c:	3e700000 	.word	0x3e700000
 80024a0:	41700000 	.word	0x41700000
 80024a4:	3fe00000 	.word	0x3fe00000
 80024a8:	a90c      	add	r1, sp, #48	; 0x30
 80024aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	430a      	orrs	r2, r1
 80024b2:	e799      	b.n	80023e8 <__kernel_rem_pio2+0x278>
 80024b4:	3401      	adds	r4, #1
 80024b6:	e7a0      	b.n	80023fa <__kernel_rem_pio2+0x28a>
 80024b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80024be:	f7fd ffd5 	bl	800046c <__aeabi_i2d>
 80024c2:	e8e5 0102 	strd	r0, r1, [r5], #8
 80024c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024c8:	9508      	str	r5, [sp, #32]
 80024ca:	461c      	mov	r4, r3
 80024cc:	2700      	movs	r7, #0
 80024ce:	f04f 0800 	mov.w	r8, #0
 80024d2:	f04f 0900 	mov.w	r9, #0
 80024d6:	9b04      	ldr	r3, [sp, #16]
 80024d8:	429f      	cmp	r7, r3
 80024da:	dd03      	ble.n	80024e4 <__kernel_rem_pio2+0x374>
 80024dc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80024e0:	3601      	adds	r6, #1
 80024e2:	e79d      	b.n	8002420 <__kernel_rem_pio2+0x2b0>
 80024e4:	9908      	ldr	r1, [sp, #32]
 80024e6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80024ea:	9108      	str	r1, [sp, #32]
 80024ec:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80024f0:	f7fe f822 	bl	8000538 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4640      	mov	r0, r8
 80024fa:	4649      	mov	r1, r9
 80024fc:	f7fd fe6a 	bl	80001d4 <__adddf3>
 8002500:	3701      	adds	r7, #1
 8002502:	4680      	mov	r8, r0
 8002504:	4689      	mov	r9, r1
 8002506:	e7e6      	b.n	80024d6 <__kernel_rem_pio2+0x366>
 8002508:	3c01      	subs	r4, #1
 800250a:	ab0c      	add	r3, sp, #48	; 0x30
 800250c:	f1aa 0a18 	sub.w	sl, sl, #24
 8002510:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f7      	beq.n	8002508 <__kernel_rem_pio2+0x398>
 8002518:	4650      	mov	r0, sl
 800251a:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 80027f0 <__kernel_rem_pio2+0x680>
 800251e:	f000 fabf 	bl	8002aa0 <scalbn>
 8002522:	00e5      	lsls	r5, r4, #3
 8002524:	ab98      	add	r3, sp, #608	; 0x260
 8002526:	eb03 0905 	add.w	r9, r3, r5
 800252a:	ec57 6b10 	vmov	r6, r7, d0
 800252e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8002532:	46a0      	mov	r8, r4
 8002534:	f1b8 0f00 	cmp.w	r8, #0
 8002538:	da4d      	bge.n	80025d6 <__kernel_rem_pio2+0x466>
 800253a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 80027f8 <__kernel_rem_pio2+0x688>
 800253e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8002542:	2300      	movs	r3, #0
 8002544:	9304      	str	r3, [sp, #16]
 8002546:	4657      	mov	r7, sl
 8002548:	9b04      	ldr	r3, [sp, #16]
 800254a:	ebb4 0903 	subs.w	r9, r4, r3
 800254e:	d476      	bmi.n	800263e <__kernel_rem_pio2+0x4ce>
 8002550:	4bab      	ldr	r3, [pc, #684]	; (8002800 <__kernel_rem_pio2+0x690>)
 8002552:	461e      	mov	r6, r3
 8002554:	ab70      	add	r3, sp, #448	; 0x1c0
 8002556:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800255a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800255e:	f04f 0800 	mov.w	r8, #0
 8002562:	e05e      	b.n	8002622 <__kernel_rem_pio2+0x4b2>
 8002564:	f1ca 0000 	rsb	r0, sl, #0
 8002568:	ec49 8b10 	vmov	d0, r8, r9
 800256c:	f000 fa98 	bl	8002aa0 <scalbn>
 8002570:	ec55 4b10 	vmov	r4, r5, d0
 8002574:	2200      	movs	r2, #0
 8002576:	4ba3      	ldr	r3, [pc, #652]	; (8002804 <__kernel_rem_pio2+0x694>)
 8002578:	ee10 0a10 	vmov	r0, s0
 800257c:	4629      	mov	r1, r5
 800257e:	f7fe fa61 	bl	8000a44 <__aeabi_dcmpge>
 8002582:	b1f8      	cbz	r0, 80025c4 <__kernel_rem_pio2+0x454>
 8002584:	2200      	movs	r2, #0
 8002586:	4ba0      	ldr	r3, [pc, #640]	; (8002808 <__kernel_rem_pio2+0x698>)
 8002588:	4620      	mov	r0, r4
 800258a:	4629      	mov	r1, r5
 800258c:	f7fd ffd4 	bl	8000538 <__aeabi_dmul>
 8002590:	f7fe fa6c 	bl	8000a6c <__aeabi_d2iz>
 8002594:	4606      	mov	r6, r0
 8002596:	f7fd ff69 	bl	800046c <__aeabi_i2d>
 800259a:	2200      	movs	r2, #0
 800259c:	4b99      	ldr	r3, [pc, #612]	; (8002804 <__kernel_rem_pio2+0x694>)
 800259e:	f7fd ffcb 	bl	8000538 <__aeabi_dmul>
 80025a2:	460b      	mov	r3, r1
 80025a4:	4602      	mov	r2, r0
 80025a6:	4629      	mov	r1, r5
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7fd fe11 	bl	80001d0 <__aeabi_dsub>
 80025ae:	f7fe fa5d 	bl	8000a6c <__aeabi_d2iz>
 80025b2:	1c7c      	adds	r4, r7, #1
 80025b4:	ab0c      	add	r3, sp, #48	; 0x30
 80025b6:	f10a 0a18 	add.w	sl, sl, #24
 80025ba:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80025be:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80025c2:	e7a9      	b.n	8002518 <__kernel_rem_pio2+0x3a8>
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fe fa50 	bl	8000a6c <__aeabi_d2iz>
 80025cc:	ab0c      	add	r3, sp, #48	; 0x30
 80025ce:	463c      	mov	r4, r7
 80025d0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80025d4:	e7a0      	b.n	8002518 <__kernel_rem_pio2+0x3a8>
 80025d6:	ab0c      	add	r3, sp, #48	; 0x30
 80025d8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80025dc:	f7fd ff46 	bl	800046c <__aeabi_i2d>
 80025e0:	4632      	mov	r2, r6
 80025e2:	463b      	mov	r3, r7
 80025e4:	f7fd ffa8 	bl	8000538 <__aeabi_dmul>
 80025e8:	2200      	movs	r2, #0
 80025ea:	e969 0102 	strd	r0, r1, [r9, #-8]!
 80025ee:	4b86      	ldr	r3, [pc, #536]	; (8002808 <__kernel_rem_pio2+0x698>)
 80025f0:	4630      	mov	r0, r6
 80025f2:	4639      	mov	r1, r7
 80025f4:	f7fd ffa0 	bl	8000538 <__aeabi_dmul>
 80025f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80025fc:	4606      	mov	r6, r0
 80025fe:	460f      	mov	r7, r1
 8002600:	e798      	b.n	8002534 <__kernel_rem_pio2+0x3c4>
 8002602:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8002606:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800260a:	f7fd ff95 	bl	8000538 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002616:	f7fd fddd 	bl	80001d4 <__adddf3>
 800261a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800261e:	f108 0801 	add.w	r8, r8, #1
 8002622:	9b00      	ldr	r3, [sp, #0]
 8002624:	4598      	cmp	r8, r3
 8002626:	dc02      	bgt.n	800262e <__kernel_rem_pio2+0x4be>
 8002628:	9b04      	ldr	r3, [sp, #16]
 800262a:	4598      	cmp	r8, r3
 800262c:	dde9      	ble.n	8002602 <__kernel_rem_pio2+0x492>
 800262e:	9b04      	ldr	r3, [sp, #16]
 8002630:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002634:	3301      	adds	r3, #1
 8002636:	ecaa 7b02 	vstmia	sl!, {d7}
 800263a:	9304      	str	r3, [sp, #16]
 800263c:	e784      	b.n	8002548 <__kernel_rem_pio2+0x3d8>
 800263e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8002640:	2b03      	cmp	r3, #3
 8002642:	d85d      	bhi.n	8002700 <__kernel_rem_pio2+0x590>
 8002644:	e8df f003 	tbb	[pc, r3]
 8002648:	0226264b 	.word	0x0226264b
 800264c:	ab98      	add	r3, sp, #608	; 0x260
 800264e:	441d      	add	r5, r3
 8002650:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8002654:	462e      	mov	r6, r5
 8002656:	46a2      	mov	sl, r4
 8002658:	f1ba 0f00 	cmp.w	sl, #0
 800265c:	dc6e      	bgt.n	800273c <__kernel_rem_pio2+0x5cc>
 800265e:	462e      	mov	r6, r5
 8002660:	46a2      	mov	sl, r4
 8002662:	f1ba 0f01 	cmp.w	sl, #1
 8002666:	f300 808a 	bgt.w	800277e <__kernel_rem_pio2+0x60e>
 800266a:	2000      	movs	r0, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2c01      	cmp	r4, #1
 8002670:	f300 80a6 	bgt.w	80027c0 <__kernel_rem_pio2+0x650>
 8002674:	f1bb 0f00 	cmp.w	fp, #0
 8002678:	f040 80a8 	bne.w	80027cc <__kernel_rem_pio2+0x65c>
 800267c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8002680:	9c02      	ldr	r4, [sp, #8]
 8002682:	e9c4 2300 	strd	r2, r3, [r4]
 8002686:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800268a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800268e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002692:	e035      	b.n	8002700 <__kernel_rem_pio2+0x590>
 8002694:	3508      	adds	r5, #8
 8002696:	ab48      	add	r3, sp, #288	; 0x120
 8002698:	441d      	add	r5, r3
 800269a:	4626      	mov	r6, r4
 800269c:	2000      	movs	r0, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	2e00      	cmp	r6, #0
 80026a2:	da3c      	bge.n	800271e <__kernel_rem_pio2+0x5ae>
 80026a4:	f1bb 0f00 	cmp.w	fp, #0
 80026a8:	d03f      	beq.n	800272a <__kernel_rem_pio2+0x5ba>
 80026aa:	4602      	mov	r2, r0
 80026ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80026b0:	9d02      	ldr	r5, [sp, #8]
 80026b2:	e9c5 2300 	strd	r2, r3, [r5]
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80026be:	f7fd fd87 	bl	80001d0 <__aeabi_dsub>
 80026c2:	ae4a      	add	r6, sp, #296	; 0x128
 80026c4:	2501      	movs	r5, #1
 80026c6:	42ac      	cmp	r4, r5
 80026c8:	da32      	bge.n	8002730 <__kernel_rem_pio2+0x5c0>
 80026ca:	f1bb 0f00 	cmp.w	fp, #0
 80026ce:	d002      	beq.n	80026d6 <__kernel_rem_pio2+0x566>
 80026d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80026d4:	4619      	mov	r1, r3
 80026d6:	9b02      	ldr	r3, [sp, #8]
 80026d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80026dc:	e010      	b.n	8002700 <__kernel_rem_pio2+0x590>
 80026de:	ab98      	add	r3, sp, #608	; 0x260
 80026e0:	441d      	add	r5, r3
 80026e2:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80026e6:	2000      	movs	r0, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	2c00      	cmp	r4, #0
 80026ec:	da11      	bge.n	8002712 <__kernel_rem_pio2+0x5a2>
 80026ee:	f1bb 0f00 	cmp.w	fp, #0
 80026f2:	d002      	beq.n	80026fa <__kernel_rem_pio2+0x58a>
 80026f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80026f8:	4619      	mov	r1, r3
 80026fa:	9b02      	ldr	r3, [sp, #8]
 80026fc:	e9c3 0100 	strd	r0, r1, [r3]
 8002700:	9b03      	ldr	r3, [sp, #12]
 8002702:	f003 0007 	and.w	r0, r3, #7
 8002706:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800270a:	ecbd 8b02 	vpop	{d8}
 800270e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002712:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8002716:	f7fd fd5d 	bl	80001d4 <__adddf3>
 800271a:	3c01      	subs	r4, #1
 800271c:	e7e5      	b.n	80026ea <__kernel_rem_pio2+0x57a>
 800271e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8002722:	f7fd fd57 	bl	80001d4 <__adddf3>
 8002726:	3e01      	subs	r6, #1
 8002728:	e7ba      	b.n	80026a0 <__kernel_rem_pio2+0x530>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	e7bf      	b.n	80026b0 <__kernel_rem_pio2+0x540>
 8002730:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8002734:	f7fd fd4e 	bl	80001d4 <__adddf3>
 8002738:	3501      	adds	r5, #1
 800273a:	e7c4      	b.n	80026c6 <__kernel_rem_pio2+0x556>
 800273c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8002740:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8002744:	ec53 2b17 	vmov	r2, r3, d7
 8002748:	4640      	mov	r0, r8
 800274a:	4649      	mov	r1, r9
 800274c:	ed8d 7b00 	vstr	d7, [sp]
 8002750:	f7fd fd40 	bl	80001d4 <__adddf3>
 8002754:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4640      	mov	r0, r8
 800275e:	4649      	mov	r1, r9
 8002760:	f7fd fd36 	bl	80001d0 <__aeabi_dsub>
 8002764:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002768:	f7fd fd34 	bl	80001d4 <__adddf3>
 800276c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8002770:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8002774:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002778:	ed06 7b02 	vstr	d7, [r6, #-8]
 800277c:	e76c      	b.n	8002658 <__kernel_rem_pio2+0x4e8>
 800277e:	ed16 7b02 	vldr	d7, [r6, #-8]
 8002782:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8002786:	ec53 2b17 	vmov	r2, r3, d7
 800278a:	4640      	mov	r0, r8
 800278c:	4649      	mov	r1, r9
 800278e:	ed8d 7b00 	vstr	d7, [sp]
 8002792:	f7fd fd1f 	bl	80001d4 <__adddf3>
 8002796:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4640      	mov	r0, r8
 80027a0:	4649      	mov	r1, r9
 80027a2:	f7fd fd15 	bl	80001d0 <__aeabi_dsub>
 80027a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80027aa:	f7fd fd13 	bl	80001d4 <__adddf3>
 80027ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80027b2:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80027b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80027ba:	ed06 7b02 	vstr	d7, [r6, #-8]
 80027be:	e750      	b.n	8002662 <__kernel_rem_pio2+0x4f2>
 80027c0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80027c4:	f7fd fd06 	bl	80001d4 <__adddf3>
 80027c8:	3c01      	subs	r4, #1
 80027ca:	e750      	b.n	800266e <__kernel_rem_pio2+0x4fe>
 80027cc:	9a02      	ldr	r2, [sp, #8]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6110      	str	r0, [r2, #16]
 80027d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80027da:	6053      	str	r3, [r2, #4]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	6093      	str	r3, [r2, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80027e6:	60d3      	str	r3, [r2, #12]
 80027e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80027ec:	6153      	str	r3, [r2, #20]
 80027ee:	e787      	b.n	8002700 <__kernel_rem_pio2+0x590>
 80027f0:	00000000 	.word	0x00000000
 80027f4:	3ff00000 	.word	0x3ff00000
	...
 8002800:	08002d50 	.word	0x08002d50
 8002804:	41700000 	.word	0x41700000
 8002808:	3e700000 	.word	0x3e700000
 800280c:	00000000 	.word	0x00000000

08002810 <__kernel_sin>:
 8002810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002814:	ec55 4b10 	vmov	r4, r5, d0
 8002818:	b085      	sub	sp, #20
 800281a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800281e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8002822:	ed8d 1b00 	vstr	d1, [sp]
 8002826:	9002      	str	r0, [sp, #8]
 8002828:	da06      	bge.n	8002838 <__kernel_sin+0x28>
 800282a:	ee10 0a10 	vmov	r0, s0
 800282e:	4629      	mov	r1, r5
 8002830:	f7fe f91c 	bl	8000a6c <__aeabi_d2iz>
 8002834:	2800      	cmp	r0, #0
 8002836:	d051      	beq.n	80028dc <__kernel_sin+0xcc>
 8002838:	4622      	mov	r2, r4
 800283a:	462b      	mov	r3, r5
 800283c:	4620      	mov	r0, r4
 800283e:	4629      	mov	r1, r5
 8002840:	f7fd fe7a 	bl	8000538 <__aeabi_dmul>
 8002844:	4682      	mov	sl, r0
 8002846:	468b      	mov	fp, r1
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd fe72 	bl	8000538 <__aeabi_dmul>
 8002854:	a341      	add	r3, pc, #260	; (adr r3, 800295c <__kernel_sin+0x14c>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	4680      	mov	r8, r0
 800285c:	4689      	mov	r9, r1
 800285e:	4650      	mov	r0, sl
 8002860:	4659      	mov	r1, fp
 8002862:	f7fd fe69 	bl	8000538 <__aeabi_dmul>
 8002866:	a33f      	add	r3, pc, #252	; (adr r3, 8002964 <__kernel_sin+0x154>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fcb0 	bl	80001d0 <__aeabi_dsub>
 8002870:	4652      	mov	r2, sl
 8002872:	465b      	mov	r3, fp
 8002874:	f7fd fe60 	bl	8000538 <__aeabi_dmul>
 8002878:	a33c      	add	r3, pc, #240	; (adr r3, 800296c <__kernel_sin+0x15c>)
 800287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287e:	f7fd fca9 	bl	80001d4 <__adddf3>
 8002882:	4652      	mov	r2, sl
 8002884:	465b      	mov	r3, fp
 8002886:	f7fd fe57 	bl	8000538 <__aeabi_dmul>
 800288a:	a33a      	add	r3, pc, #232	; (adr r3, 8002974 <__kernel_sin+0x164>)
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f7fd fc9e 	bl	80001d0 <__aeabi_dsub>
 8002894:	4652      	mov	r2, sl
 8002896:	465b      	mov	r3, fp
 8002898:	f7fd fe4e 	bl	8000538 <__aeabi_dmul>
 800289c:	a337      	add	r3, pc, #220	; (adr r3, 800297c <__kernel_sin+0x16c>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	f7fd fc97 	bl	80001d4 <__adddf3>
 80028a6:	9b02      	ldr	r3, [sp, #8]
 80028a8:	4606      	mov	r6, r0
 80028aa:	460f      	mov	r7, r1
 80028ac:	b9db      	cbnz	r3, 80028e6 <__kernel_sin+0xd6>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4650      	mov	r0, sl
 80028b4:	4659      	mov	r1, fp
 80028b6:	f7fd fe3f 	bl	8000538 <__aeabi_dmul>
 80028ba:	a325      	add	r3, pc, #148	; (adr r3, 8002950 <__kernel_sin+0x140>)
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	f7fd fc86 	bl	80001d0 <__aeabi_dsub>
 80028c4:	4642      	mov	r2, r8
 80028c6:	464b      	mov	r3, r9
 80028c8:	f7fd fe36 	bl	8000538 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4620      	mov	r0, r4
 80028d2:	4629      	mov	r1, r5
 80028d4:	f7fd fc7e 	bl	80001d4 <__adddf3>
 80028d8:	4604      	mov	r4, r0
 80028da:	460d      	mov	r5, r1
 80028dc:	ec45 4b10 	vmov	d0, r4, r5
 80028e0:	b005      	add	sp, #20
 80028e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e6:	2200      	movs	r2, #0
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <__kernel_sin+0x148>)
 80028ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80028ee:	f7fd fe23 	bl	8000538 <__aeabi_dmul>
 80028f2:	4632      	mov	r2, r6
 80028f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028f8:	463b      	mov	r3, r7
 80028fa:	4640      	mov	r0, r8
 80028fc:	4649      	mov	r1, r9
 80028fe:	f7fd fe1b 	bl	8000538 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800290a:	f7fd fc61 	bl	80001d0 <__aeabi_dsub>
 800290e:	4652      	mov	r2, sl
 8002910:	465b      	mov	r3, fp
 8002912:	f7fd fe11 	bl	8000538 <__aeabi_dmul>
 8002916:	e9dd 2300 	ldrd	r2, r3, [sp]
 800291a:	f7fd fc59 	bl	80001d0 <__aeabi_dsub>
 800291e:	a30c      	add	r3, pc, #48	; (adr r3, 8002950 <__kernel_sin+0x140>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	4606      	mov	r6, r0
 8002926:	460f      	mov	r7, r1
 8002928:	4640      	mov	r0, r8
 800292a:	4649      	mov	r1, r9
 800292c:	f7fd fe04 	bl	8000538 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4630      	mov	r0, r6
 8002936:	4639      	mov	r1, r7
 8002938:	f7fd fc4c 	bl	80001d4 <__adddf3>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fc44 	bl	80001d0 <__aeabi_dsub>
 8002948:	e7c6      	b.n	80028d8 <__kernel_sin+0xc8>
 800294a:	bf00      	nop
 800294c:	f3af 8000 	nop.w
 8002950:	55555549 	.word	0x55555549
 8002954:	3fc55555 	.word	0x3fc55555
 8002958:	3fe00000 	.word	0x3fe00000
 800295c:	5acfd57c 	.word	0x5acfd57c
 8002960:	3de5d93a 	.word	0x3de5d93a
 8002964:	8a2b9ceb 	.word	0x8a2b9ceb
 8002968:	3e5ae5e6 	.word	0x3e5ae5e6
 800296c:	57b1fe7d 	.word	0x57b1fe7d
 8002970:	3ec71de3 	.word	0x3ec71de3
 8002974:	19c161d5 	.word	0x19c161d5
 8002978:	3f2a01a0 	.word	0x3f2a01a0
 800297c:	1110f8a6 	.word	0x1110f8a6
 8002980:	3f811111 	.word	0x3f811111

08002984 <fabs>:
 8002984:	ec53 2b10 	vmov	r2, r3, d0
 8002988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800298c:	ec43 2b10 	vmov	d0, r2, r3
 8002990:	4770      	bx	lr
 8002992:	0000      	movs	r0, r0
 8002994:	0000      	movs	r0, r0
	...

08002998 <floor>:
 8002998:	ec51 0b10 	vmov	r0, r1, d0
 800299c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80029a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80029a8:	2e13      	cmp	r6, #19
 80029aa:	ee10 8a10 	vmov	r8, s0
 80029ae:	460c      	mov	r4, r1
 80029b0:	ee10 5a10 	vmov	r5, s0
 80029b4:	dc35      	bgt.n	8002a22 <floor+0x8a>
 80029b6:	2e00      	cmp	r6, #0
 80029b8:	da17      	bge.n	80029ea <floor+0x52>
 80029ba:	a335      	add	r3, pc, #212	; (adr r3, 8002a90 <floor+0xf8>)
 80029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c0:	f7fd fc08 	bl	80001d4 <__adddf3>
 80029c4:	2200      	movs	r2, #0
 80029c6:	2300      	movs	r3, #0
 80029c8:	f7fe f846 	bl	8000a58 <__aeabi_dcmpgt>
 80029cc:	b150      	cbz	r0, 80029e4 <floor+0x4c>
 80029ce:	2c00      	cmp	r4, #0
 80029d0:	da5a      	bge.n	8002a88 <floor+0xf0>
 80029d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80029d6:	ea53 0308 	orrs.w	r3, r3, r8
 80029da:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <floor+0x100>)
 80029dc:	f04f 0500 	mov.w	r5, #0
 80029e0:	bf18      	it	ne
 80029e2:	461c      	movne	r4, r3
 80029e4:	4621      	mov	r1, r4
 80029e6:	4628      	mov	r0, r5
 80029e8:	e025      	b.n	8002a36 <floor+0x9e>
 80029ea:	4f2c      	ldr	r7, [pc, #176]	; (8002a9c <floor+0x104>)
 80029ec:	4137      	asrs	r7, r6
 80029ee:	ea01 0307 	and.w	r3, r1, r7
 80029f2:	4303      	orrs	r3, r0
 80029f4:	d01f      	beq.n	8002a36 <floor+0x9e>
 80029f6:	a326      	add	r3, pc, #152	; (adr r3, 8002a90 <floor+0xf8>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f7fd fbea 	bl	80001d4 <__adddf3>
 8002a00:	2200      	movs	r2, #0
 8002a02:	2300      	movs	r3, #0
 8002a04:	f7fe f828 	bl	8000a58 <__aeabi_dcmpgt>
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d0eb      	beq.n	80029e4 <floor+0x4c>
 8002a0c:	2c00      	cmp	r4, #0
 8002a0e:	bfbe      	ittt	lt
 8002a10:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8002a14:	fa43 f606 	asrlt.w	r6, r3, r6
 8002a18:	19a4      	addlt	r4, r4, r6
 8002a1a:	ea24 0407 	bic.w	r4, r4, r7
 8002a1e:	2500      	movs	r5, #0
 8002a20:	e7e0      	b.n	80029e4 <floor+0x4c>
 8002a22:	2e33      	cmp	r6, #51	; 0x33
 8002a24:	dd0b      	ble.n	8002a3e <floor+0xa6>
 8002a26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002a2a:	d104      	bne.n	8002a36 <floor+0x9e>
 8002a2c:	ee10 2a10 	vmov	r2, s0
 8002a30:	460b      	mov	r3, r1
 8002a32:	f7fd fbcf 	bl	80001d4 <__adddf3>
 8002a36:	ec41 0b10 	vmov	d0, r0, r1
 8002a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a3e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	fa23 f707 	lsr.w	r7, r3, r7
 8002a4a:	4238      	tst	r0, r7
 8002a4c:	d0f3      	beq.n	8002a36 <floor+0x9e>
 8002a4e:	a310      	add	r3, pc, #64	; (adr r3, 8002a90 <floor+0xf8>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fbbe 	bl	80001d4 <__adddf3>
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f7fd fffc 	bl	8000a58 <__aeabi_dcmpgt>
 8002a60:	2800      	cmp	r0, #0
 8002a62:	d0bf      	beq.n	80029e4 <floor+0x4c>
 8002a64:	2c00      	cmp	r4, #0
 8002a66:	da02      	bge.n	8002a6e <floor+0xd6>
 8002a68:	2e14      	cmp	r6, #20
 8002a6a:	d103      	bne.n	8002a74 <floor+0xdc>
 8002a6c:	3401      	adds	r4, #1
 8002a6e:	ea25 0507 	bic.w	r5, r5, r7
 8002a72:	e7b7      	b.n	80029e4 <floor+0x4c>
 8002a74:	2301      	movs	r3, #1
 8002a76:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8002a7a:	fa03 f606 	lsl.w	r6, r3, r6
 8002a7e:	4435      	add	r5, r6
 8002a80:	45a8      	cmp	r8, r5
 8002a82:	bf88      	it	hi
 8002a84:	18e4      	addhi	r4, r4, r3
 8002a86:	e7f2      	b.n	8002a6e <floor+0xd6>
 8002a88:	2500      	movs	r5, #0
 8002a8a:	462c      	mov	r4, r5
 8002a8c:	e7aa      	b.n	80029e4 <floor+0x4c>
 8002a8e:	bf00      	nop
 8002a90:	8800759c 	.word	0x8800759c
 8002a94:	7e37e43c 	.word	0x7e37e43c
 8002a98:	bff00000 	.word	0xbff00000
 8002a9c:	000fffff 	.word	0x000fffff

08002aa0 <scalbn>:
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	ec55 4b10 	vmov	r4, r5, d0
 8002aa6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8002aaa:	4606      	mov	r6, r0
 8002aac:	462b      	mov	r3, r5
 8002aae:	b9b2      	cbnz	r2, 8002ade <scalbn+0x3e>
 8002ab0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8002ab4:	4323      	orrs	r3, r4
 8002ab6:	d03c      	beq.n	8002b32 <scalbn+0x92>
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <scalbn+0xe8>)
 8002abc:	4629      	mov	r1, r5
 8002abe:	ee10 0a10 	vmov	r0, s0
 8002ac2:	f7fd fd39 	bl	8000538 <__aeabi_dmul>
 8002ac6:	4a31      	ldr	r2, [pc, #196]	; (8002b8c <scalbn+0xec>)
 8002ac8:	4296      	cmp	r6, r2
 8002aca:	4604      	mov	r4, r0
 8002acc:	460d      	mov	r5, r1
 8002ace:	460b      	mov	r3, r1
 8002ad0:	da13      	bge.n	8002afa <scalbn+0x5a>
 8002ad2:	a329      	add	r3, pc, #164	; (adr r3, 8002b78 <scalbn+0xd8>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd fd2e 	bl	8000538 <__aeabi_dmul>
 8002adc:	e00a      	b.n	8002af4 <scalbn+0x54>
 8002ade:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002ae2:	428a      	cmp	r2, r1
 8002ae4:	d10c      	bne.n	8002b00 <scalbn+0x60>
 8002ae6:	ee10 2a10 	vmov	r2, s0
 8002aea:	462b      	mov	r3, r5
 8002aec:	4620      	mov	r0, r4
 8002aee:	4629      	mov	r1, r5
 8002af0:	f7fd fb70 	bl	80001d4 <__adddf3>
 8002af4:	4604      	mov	r4, r0
 8002af6:	460d      	mov	r5, r1
 8002af8:	e01b      	b.n	8002b32 <scalbn+0x92>
 8002afa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002afe:	3a36      	subs	r2, #54	; 0x36
 8002b00:	4432      	add	r2, r6
 8002b02:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8002b06:	428a      	cmp	r2, r1
 8002b08:	dd0b      	ble.n	8002b22 <scalbn+0x82>
 8002b0a:	ec45 4b11 	vmov	d1, r4, r5
 8002b0e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002b80 <scalbn+0xe0>
 8002b12:	f000 f83f 	bl	8002b94 <copysign>
 8002b16:	a31a      	add	r3, pc, #104	; (adr r3, 8002b80 <scalbn+0xe0>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	ec51 0b10 	vmov	r0, r1, d0
 8002b20:	e7da      	b.n	8002ad8 <scalbn+0x38>
 8002b22:	2a00      	cmp	r2, #0
 8002b24:	dd08      	ble.n	8002b38 <scalbn+0x98>
 8002b26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002b2a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b2e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002b32:	ec45 4b10 	vmov	d0, r4, r5
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
 8002b38:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8002b3c:	da0d      	bge.n	8002b5a <scalbn+0xba>
 8002b3e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002b42:	429e      	cmp	r6, r3
 8002b44:	ec45 4b11 	vmov	d1, r4, r5
 8002b48:	dce1      	bgt.n	8002b0e <scalbn+0x6e>
 8002b4a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8002b78 <scalbn+0xd8>
 8002b4e:	f000 f821 	bl	8002b94 <copysign>
 8002b52:	a309      	add	r3, pc, #36	; (adr r3, 8002b78 <scalbn+0xd8>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	e7e0      	b.n	8002b1c <scalbn+0x7c>
 8002b5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002b5e:	3236      	adds	r2, #54	; 0x36
 8002b60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002b68:	4620      	mov	r0, r4
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <scalbn+0xf0>)
 8002b70:	e7b2      	b.n	8002ad8 <scalbn+0x38>
 8002b72:	bf00      	nop
 8002b74:	f3af 8000 	nop.w
 8002b78:	c2f8f359 	.word	0xc2f8f359
 8002b7c:	01a56e1f 	.word	0x01a56e1f
 8002b80:	8800759c 	.word	0x8800759c
 8002b84:	7e37e43c 	.word	0x7e37e43c
 8002b88:	43500000 	.word	0x43500000
 8002b8c:	ffff3cb0 	.word	0xffff3cb0
 8002b90:	3c900000 	.word	0x3c900000

08002b94 <copysign>:
 8002b94:	ec53 2b10 	vmov	r2, r3, d0
 8002b98:	ee11 0a90 	vmov	r0, s3
 8002b9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002ba0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8002ba4:	ea41 0300 	orr.w	r3, r1, r0
 8002ba8:	ec43 2b10 	vmov	d0, r2, r3
 8002bac:	4770      	bx	lr
	...

08002bb0 <_init>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr

08002bbc <_fini>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	bf00      	nop
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr
